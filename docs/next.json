{"meta":{"version":"0.3.3","format":20,"date":1639332270551},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n    \n   # <img src=\"https://cdn.discordapp.com/avatars/834822955229380619/7d0142158babe0375e7cc633e87c06d4.png\" height=\"30\"> GCommands\n    \n  <br />\n  <p>\n    <a href=\"https://www.npmjs.com/package/gcommands\"><img src=\"https://nodei.co/npm/gcommands.png?downloads=true&stars=true\" alt=\"NPM Banner\"></a>\n  </p>\n  <p>\n    <a href=\"https://ko-fi.com/H2H05FNRL\"><img src=\"https://img.shields.io/badge/Kofi-Donate-yellow?style=for-the-badge\" height=\"30\" /></a>\n    <a href=\"https://github.com/Garlic-Team/GCommands\"><img src=\"https://img.shields.io/badge/Open-Source-blue?style=for-the-badge\" height=\"30\" /></a>\n    <img src=\"https://img.shields.io/badge/Made%20With-TypeScript-red?style=for-the-badge\" height=\"30\" />\n  </p>\n</div>\n\n---\n\n## üìÇ | Installation\n\n```sh\n# Next (recommended)\nnpm install gcommands@next\nyarn add gcommands@next\n\n# Next Dev (until the stable next version is released)\nnpm install gcommands@next-dev\nyarn add gcommands@next-dev\n\n# Latest\nnpm install gcommands@latest\nyarn add gcommands@latest\n\n# Dev Build\nnpm install gcommands@dev\nyarn add gcommands@dev\n```\n\n## üê¢ | Guide & Documentation\nTo help you learn more about GCommands we have a [guide](https://gcommands.js.org/guide/) and [documentation](https://garlic-team.js.org/#/docs/gcommands/next/general/welcome) for you.  \nIf you're still in trouble, you can join our [Garlic Team](https://discord.gg/AjKJSBbGm2) discord server.\n\n## üëÄ | Features\n\n- Flexible\n- Supports slash, legacy and context menus\n- Supports many types of arguments\n- Supports custom plugins\n- Built-in command, listener, component handler\n","path":"README.md"}}}},"classes":[{"name":"Argument","construct":{"name":"constructor","params":[{"name":"name","optional":false,"type":[[["string"]]]},{"name":"options","optional":false,"type":[[["ArgumentOptions"]]]}],"returns":[[["Argument"]]],"meta":{"line":35,"file":"Argument.ts","path":"src/lib/arguments"}},"props":[{"name":"choices","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":31,"file":"Argument.ts","path":"src/lib/arguments"}},{"name":"description","readonly":true,"type":[[["string"]]],"meta":{"line":29,"file":"Argument.ts","path":"src/lib/arguments"}},{"name":"name","readonly":true,"type":[[["string"]]],"meta":{"line":27,"file":"Argument.ts","path":"src/lib/arguments"}},{"name":"options","readonly":true,"type":[[["Array","<"],["CommandArgument"," | "],["Argument",">"]]],"meta":{"line":32,"file":"Argument.ts","path":"src/lib/arguments"}},{"name":"required","readonly":true,"default":"false","type":[[["boolean"]]],"meta":{"line":30,"file":"Argument.ts","path":"src/lib/arguments"}},{"name":"run","type":[[["("],["ctx",": "],["AutocompleteContext",") => "],["any"]]],"meta":{"line":33,"file":"Argument.ts","path":"src/lib/arguments"}},{"name":"type","readonly":true,"type":[[["ArgumentType"]]],"meta":{"line":28,"file":"Argument.ts","path":"src/lib/arguments"}}],"methods":[{"name":"validate","scope":"static","access":"private","params":[{"name":"name","optional":false,"type":[[["string"]]]},{"name":"options","optional":false,"type":[[["ArgumentOptions"]]]}],"returns":[[["void"]]],"meta":{"line":42,"file":"Argument.ts","path":"src/lib/arguments"}}],"meta":{"line":26,"file":"Argument.ts","path":"src/lib/arguments"}},{"name":"ChannelOnlyInhibitor","construct":{"name":"constructor","params":[{"name":"channelId","optional":false,"type":[[["string"]]]}],"returns":[[["ChannelOnlyInhibitor"]]],"meta":{"line":7,"file":"ChannelOnlyInhibitor.ts","path":"src/inhibitors"}},"props":[{"name":"channelId","readonly":true,"type":[[["string"]]],"meta":{"line":5,"file":"ChannelOnlyInhibitor.ts","path":"src/inhibitors"}}],"methods":[{"name":"run","params":[{"name":"ctx","optional":false,"type":[[["CommandContext"," | "],["ComponentContext"]]]}],"returns":[[["boolean"]]],"meta":{"line":11,"file":"ChannelOnlyInhibitor.ts","path":"src/inhibitors"}}],"meta":{"line":4,"file":"ChannelOnlyInhibitor.ts","path":"src/inhibitors"}},{"name":"ClientPermissionsInhibitor","construct":{"name":"constructor","params":[{"name":"permissions","optional":false,"type":[[["Array","<"],["PermissionResolvable",">"]]]}],"returns":[[["ClientPermissionsInhibitor"]]],"meta":{"line":8,"file":"ClientPermissionsInhibitor.ts","path":"src/inhibitors"}},"props":[{"name":"permissions","readonly":true,"type":[[["Array","<"],["PermissionResolvable",">"]]],"meta":{"line":6,"file":"ClientPermissionsInhibitor.ts","path":"src/inhibitors"}}],"methods":[{"name":"run","params":[{"name":"ctx","optional":false,"type":[[["CommandContext"," | "],["ComponentContext"]]]}],"returns":[[["boolean"]]],"meta":{"line":12,"file":"ClientPermissionsInhibitor.ts","path":"src/inhibitors"}}],"meta":{"line":5,"file":"ClientPermissionsInhibitor.ts","path":"src/inhibitors"}},{"name":"Command","construct":{"name":"constructor","params":[{"name":"name","optional":false,"type":[[["string"]]]},{"name":"options","optional":false,"type":[[["CommandOptions"]]]}],"returns":[[["Command"]]],"meta":{"line":55,"file":"Command.ts","path":"src/lib/structures"}},"props":[{"name":"arguments","readonly":true,"type":[[["Array","<"],["CommandArgument"," | "],["Argument",">"]]],"meta":{"line":48,"file":"Command.ts","path":"src/lib/structures"}},{"name":"client","type":[[["GClient","<"],["boolean",">"]]],"meta":{"line":44,"file":"Command.ts","path":"src/lib/structures"}},{"name":"cooldown","type":[[["string"]]],"meta":{"line":51,"file":"Command.ts","path":"src/lib/structures"}},{"name":"description","readonly":true,"type":[[["string"]]],"meta":{"line":46,"file":"Command.ts","path":"src/lib/structures"}},{"name":"guildId","type":[[["string"]]],"meta":{"line":50,"file":"Command.ts","path":"src/lib/structures"}},{"name":"inhibitors","readonly":true,"default":"[]","type":[[["CommandInhibitors"]]],"meta":{"line":49,"file":"Command.ts","path":"src/lib/structures"}},{"name":"name","readonly":true,"type":[[["string"]]],"meta":{"line":45,"file":"Command.ts","path":"src/lib/structures"}},{"name":"onError","readonly":true,"type":[[["("],["ctx",": "],["CommandContext",", "],["error",": "],["any",") => "],["any"]]],"meta":{"line":53,"file":"Command.ts","path":"src/lib/structures"}},{"name":"run","readonly":true,"type":[[["("],["ctx",": "],["CommandContext",") => "],["any"]]],"meta":{"line":52,"file":"Command.ts","path":"src/lib/structures"}},{"name":"type","readonly":true,"type":[[["Array","<"],["CommandType",">"]]],"meta":{"line":47,"file":"Command.ts","path":"src/lib/structures"}}],"methods":[{"name":"inhibit","params":[{"name":"ctx","optional":false,"type":[[["CommandContext"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":75,"file":"Command.ts","path":"src/lib/structures"}},{"name":"initialize","params":[{"name":"client","optional":false,"type":[[["GClient","<"],["boolean",">"]]]}],"returns":[[["void"]]],"meta":{"line":64,"file":"Command.ts","path":"src/lib/structures"}},{"name":"unregister","returns":[[["Command"]]],"meta":{"line":71,"file":"Command.ts","path":"src/lib/structures"}},{"name":"validate","scope":"static","access":"private","params":[{"name":"name","optional":false,"type":[[["string"]]]},{"name":"options","optional":false,"type":[[["CommandOptions"]]]},{"name":"run","optional":false,"type":[[["("],["ctx",": "],["CommandContext",") => "],["any"]]]}],"returns":[[["void"]]],"meta":{"line":88,"file":"Command.ts","path":"src/lib/structures"}}],"meta":{"line":43,"file":"Command.ts","path":"src/lib/structures"}},{"name":"CommandContext","extends":["BaseContext"],"construct":{"name":"constructor","params":[{"name":"client","optional":false,"type":[[["GClient","<"],["boolean",">"]]]},{"name":"options","optional":false,"type":[[["CommandContextOptions"]]]}],"returns":[[["CommandContext"]]],"meta":{"line":41,"file":"CommandContext.ts","path":"src/lib/structures"}},"props":[{"name":"arguments","readonly":true,"type":[[["ArgumentResolver"]]],"meta":{"line":34,"file":"CommandContext.ts","path":"src/lib/structures"}},{"name":"channel","readonly":true,"type":[[["TextBasedChannels"]]],"meta":{"line":27,"file":"BaseContext.ts","path":"src/lib/structures"}},{"name":"channelId","readonly":true,"type":[[["string"]]],"meta":{"line":28,"file":"BaseContext.ts","path":"src/lib/structures"}},{"name":"client","readonly":true,"type":[[["GClient","<"],["boolean",">"]]],"meta":{"line":19,"file":"BaseContext.ts","path":"src/lib/structures"}},{"name":"command","readonly":true,"type":[[["Command"]]],"meta":{"line":32,"file":"CommandContext.ts","path":"src/lib/structures"}},{"name":"commandName","readonly":true,"type":[[["string"]]],"meta":{"line":33,"file":"CommandContext.ts","path":"src/lib/structures"}},{"name":"createdAt","readonly":true,"type":[[["Date"]]],"meta":{"line":29,"file":"BaseContext.ts","path":"src/lib/structures"}},{"name":"createdTimestamp","readonly":true,"type":[[["number"]]],"meta":{"line":30,"file":"BaseContext.ts","path":"src/lib/structures"}},{"name":"deferReply","type":[[["("],["options",": "],["InteractionDeferReplyOptions",") => "],["Promise","<"],["void"," | "],["Message","<"],["boolean","> | "],["APIMessage",">"]]],"meta":{"line":39,"file":"CommandContext.ts","path":"src/lib/structures"}},{"name":"deleteReply","type":[[["(..."],["args",": "],["unknown","[]) => "],["Promise","<"],["void",">"]]],"meta":{"line":37,"file":"CommandContext.ts","path":"src/lib/structures"}},{"name":"editReply","type":[[["("],["options",": "],["string"," | "],["MessagePayload"," | "],["WebhookEditMessageOptions",") => "],["Promise","<"],["Message","<"],["boolean","> | "],["APIMessage",">"]]],"meta":{"line":36,"file":"CommandContext.ts","path":"src/lib/structures"}},{"name":"followUp","type":[[["("],["options",": "],["string"," | "],["MessagePayload"," | "],["InteractionReplyOptions",") => "],["Promise","<"],["void"," | "],["Message","<"],["boolean","> | "],["APIMessage",">"]]],"meta":{"line":38,"file":"CommandContext.ts","path":"src/lib/structures"}},{"name":"guild","readonly":true,"type":[[["Guild"]]],"meta":{"line":20,"file":"BaseContext.ts","path":"src/lib/structures"}},{"name":"guildId","readonly":true,"type":[[["string"]]],"meta":{"line":21,"file":"BaseContext.ts","path":"src/lib/structures"}},{"name":"interaction","readonly":true,"type":[[["CommandInteraction","<"],["CacheType","> | "],["ContextMenuInteraction","<"],["CacheType",">"]]],"meta":{"line":30,"file":"CommandContext.ts","path":"src/lib/structures"}},{"name":"member","readonly":true,"type":[[["GuildMember"]]],"meta":{"line":22,"file":"BaseContext.ts","path":"src/lib/structures"}},{"name":"memberPermissions","readonly":true,"type":[[["Permissions"]]],"meta":{"line":23,"file":"BaseContext.ts","path":"src/lib/structures"}},{"name":"message","readonly":true,"type":[[["Message","<"],["boolean",">"]]],"meta":{"line":31,"file":"CommandContext.ts","path":"src/lib/structures"}},{"name":"reply","type":[[["("],["options",": "],["string"," | "],["MessagePayload"," | "],["InteractionReplyOptions",") => "],["Promise","<"],["void"," | "],["Message","<"],["boolean","> | "],["APIMessage",">"]]],"meta":{"line":35,"file":"CommandContext.ts","path":"src/lib/structures"}},{"name":"user","readonly":true,"type":[[["User"]]],"meta":{"line":24,"file":"BaseContext.ts","path":"src/lib/structures"}},{"name":"userId","readonly":true,"type":[[["string"]]],"meta":{"line":26,"file":"BaseContext.ts","path":"src/lib/structures"}},{"name":"username","readonly":true,"type":[[["string"]]],"meta":{"line":25,"file":"BaseContext.ts","path":"src/lib/structures"}}],"methods":[{"name":"createBaseWithInteraction","scope":"static","params":[{"name":"interaction","optional":false,"type":[[["Interaction","<"],["CacheType",">"]]]}],"returns":[[["BaseContext"]]],"meta":{"line":38,"file":"BaseContext.ts","path":"src/lib/structures"}},{"name":"createWithInteraction","scope":"static","params":[{"name":"interaction","optional":false,"type":[[["CommandInteraction","<"],["CacheType","> | "],["ContextMenuInteraction","<"],["CacheType",">"]]]},{"name":"command","optional":false,"type":[[["Command"]]]}],"returns":[[["CommandContext"]]],"meta":{"line":45,"file":"CommandContext.ts","path":"src/lib/structures"}},{"name":"createWithMessage","scope":"static","params":[{"name":"message","optional":false,"type":[[["Message","<"],["boolean",">"]]]},{"name":"command","optional":false,"type":[[["Command"]]]},{"name":"args","optional":false,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["CommandContext"]]],"meta":{"line":60,"file":"CommandContext.ts","path":"src/lib/structures"}}],"meta":{"line":29,"file":"CommandContext.ts","path":"src/lib/structures"}},{"name":"CommandManager","extends":["Collection<string, Command>"],"construct":{"name":"constructor","params":[{"name":"entries","optional":true,"type":[[["readonly"," "],["Array","<"],["readonly"," ["],["string",", "],["Command","]>"]]]}],"returns":[[["CommandManager"]]]},"props":[{"name":"[toStringTag]","readonly":true,"type":[[["string"]]],"meta":{"line":135,"file":"lib.es2015.symbol.wellknown.d.ts","path":"node_modules/typescript/lib"}},{"name":"client","access":"private","type":[[["GClient","<"],["boolean",">"]]],"meta":{"line":7,"file":"CommandManager.ts","path":"src/lib/managers"}},{"name":"constructor","type":[[["CollectionConstructor"]]],"meta":{"line":17,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"size","readonly":true,"type":[[["number"]]],"meta":{"line":28,"file":"lib.es2015.collection.d.ts","path":"node_modules/typescript/lib"}},{"name":"[species]","scope":"static","readonly":true,"type":[[["MapConstructor"]]],"meta":{"line":317,"file":"lib.es2015.symbol.wellknown.d.ts","path":"node_modules/typescript/lib"}},{"name":"default","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["Collection",")"]]],"meta":{"line":24,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}}],"methods":[{"name":"[iterator]","description":"Returns an iterable of entries in the map.","returns":[[["IterableIterator","<["],["string",", "],["Command","]>"]]]},{"name":"at","description":"Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the item at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.","params":[{"name":"index","description":"The index of the element to obtain","optional":true,"type":[[["number"]]]}],"returns":[[["Command"]]],"meta":{"line":87,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"clear","returns":[[["void"]]]},{"name":"clone","description":"Creates an identical shallow copy of this collection.","see":[],"examples":["const newColl = someColl.clone();"],"abstract":false,"deprecated":false,"emits":[],"returns":[[["Collection","<"],["string",", "],["Command",">"]]],"meta":{"line":301,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"concat","description":"Combines this collection with others into a new collection. None of the source collections are modified.","see":[],"examples":["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"collections","description":"Collections to merge","optional":false,"type":[[["Array","<"],["Collection","<"],["string",", "],["Command",">>"]]]}],"returns":[[["Collection","<"],["string",", "],["Command",">"]]],"meta":{"line":310,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"delete","params":[{"name":"key","optional":false,"type":[[["string"]]]}],"returns":[[["boolean"]]]},{"name":"difference","description":"The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.","params":[{"name":"other","description":"The other Collection to filter against","optional":false,"type":[[["Collection","<"],["string",", "],["Command",">"]]]}],"returns":[[["Collection","<"],["string",", "],["Command",">"]]],"meta":{"line":344,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"each","description":"Identical to\n[Map.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach),\nbut returns the collection instead of undefined.","see":[],"examples":["collection\n .each(user => console.log(user.username))\n .filter(user => user.bot)\n .each(user => console.log(user.username));"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function to execute for each element","optional":false,"type":[[["("],["value",": "],["Command",", "],["key",": "],["string",", "],["collection",": "],["CommandManager",") => "],["void"]]]}],"returns":[[["CommandManager"]]],"meta":{"line":279,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"entries","description":"Returns an iterable of key, value pairs for every entry in the map.","returns":[[["IterableIterator","<["],["string",", "],["Command","]>"]]]},{"name":"equals","description":"Checks if this collection shares identical items with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.","params":[{"name":"collection","description":"Collection to compare with","optional":false,"type":[[["Collection","<"],["string",", "],["Command",">"]]]}],"returns":[[["boolean"]]],"returnsDescription":"Whether the collections have identical contents","meta":{"line":320,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"every","description":"Checks if all items passes a test. Identical in behavior to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","see":[],"examples":["collection.every(user => !user.bot);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function used to test (should return a boolean)","optional":false,"type":[[["("],["value",": "],["Command",", "],["key",": "],["string",", "],["collection",": "],["CommandManager",") => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["this"," "],["is"," "],["Collection","<"],["K2",", "],["Command",">"]]],"meta":{"line":247,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"filter","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.","see":[],"examples":["collection.filter(user => user.username === 'Bob');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"The function to test with (should return boolean)","optional":false,"type":[[["("],["value",": "],["Command",", "],["key",": "],["string",", "],["collection",": "],["CommandManager",") => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["Collection","<"],["K2",", "],["Command",">"]]],"meta":{"line":167,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"find","description":"Searches for a single item where the given function returns a truthy value. This behaves like\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in Discord.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>","see":[],"examples":["collection.find(user => user.username === 'Bob');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"The function to test with (should return boolean)","optional":false,"type":[[["("],["value",": "],["Command",", "],["key",": "],["string",", "],["collection",": "],["CommandManager",") => "],["value"," "],["is"," "],["V2"]]]}],"returns":[[["V2"]]],"meta":{"line":127,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"findKey","description":"Searches for the key of a single item where the given function returns a truthy value. This behaves like\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex),\nbut returns the key rather than the positional index.","see":[],"examples":["collection.findKey(user => user.username === 'Bob');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"The function to test with (should return boolean)","optional":false,"type":[[["("],["value",": "],["Command",", "],["key",": "],["string",", "],["collection",": "],["CommandManager",") => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["K2"]]],"meta":{"line":142,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"first","description":"Obtains the first value(s) in this collection.","returns":[[["Command"]]],"returnsDescription":"A single value if no amount is provided or an array of values, starting from the end if amount is negative","meta":{"line":48,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"firstKey","description":"Obtains the first key(s) in this collection.","returns":[[["string"]]],"returnsDescription":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative","meta":{"line":58,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"flatMap","description":"Maps each item into a Collection, then joins the results into a single Collection. Identical in behavior to\n[Array.flatMap()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap).","see":[],"examples":["collection.flatMap(guild => guild.members.cache);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function that produces a new Collection","optional":false,"type":[[["("],["value",": "],["Command",", "],["key",": "],["string",", "],["collection",": "],["CommandManager",") => "],["Collection","<"],["string",", "],["T",">"]]]}],"returns":[[["Collection","<"],["string",", "],["T",">"]]],"meta":{"line":199,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"forEach","params":[{"name":"callbackfn","optional":false,"type":[[["("],["value",": "],["Command",", "],["key",": "],["string",", "],["map",": "],["Map","<"],["string",", "],["Command",">) => "],["void"]]]},{"name":"thisArg","optional":true,"type":[[["any"]]]}],"returns":[[["void"]]]},{"name":"get","params":[{"name":"key","optional":false,"type":[[["string"]]]}],"returns":[[["Command"]]]},{"name":"has","params":[{"name":"key","optional":false,"type":[[["string"]]]}],"returns":[[["boolean"]]]},{"name":"hasAll","description":"Checks if all of the elements exist in the collection.","params":[{"name":"keys","description":"The keys of the elements to check for","optional":false,"type":[[["Array","<"],["string",">"]]]}],"returns":[[["boolean"]]],"returnsDescription":"`true` if all of the elements exist, `false` if at least one does not exist.","meta":{"line":32,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"hasAny","description":"Checks if any of the elements exist in the collection.","params":[{"name":"keys","description":"The keys of the elements to check for","optional":false,"type":[[["Array","<"],["string",">"]]]}],"returns":[[["boolean"]]],"returnsDescription":"`true` if any of the elements exist, `false` if none exist.","meta":{"line":40,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"initiate","params":[{"name":"client","optional":false,"type":[[["GClient","<"],["boolean",">"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":31,"file":"CommandManager.ts","path":"src/lib/managers"}},{"name":"intersect","description":"The intersect method returns a new structure containing items where the keys are present in both original structures.","params":[{"name":"other","description":"The other Collection to filter against","optional":false,"type":[[["Collection","<"],["string",", "],["Command",">"]]]}],"returns":[[["Collection","<"],["string",", "],["Command",">"]]],"meta":{"line":338,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"keyAt","description":"Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the key at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.","params":[{"name":"index","description":"The index of the key to obtain","optional":true,"type":[[["number"]]]}],"returns":[[["string"]]],"meta":{"line":95,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"keys","description":"Returns an iterable of keys in the map","returns":[[["IterableIterator","<"],["string",">"]]]},{"name":"last","description":"Obtains the last value(s) in this collection.","returns":[[["Command"]]],"returnsDescription":"A single value if no amount is provided or an array of values, starting from the start if\namount is negative","meta":{"line":68,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"lastKey","description":"Obtains the last key(s) in this collection.","returns":[[["string"]]],"returnsDescription":"A single key if no amount is provided or an array of keys, starting from the start if\namount is negative","meta":{"line":78,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"map","description":"Maps each item to another value into an array. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","see":[],"examples":["collection.map(user => user.tag);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function that produces an element of the new array, taking three arguments","optional":false,"type":[[["("],["value",": "],["Command",", "],["key",": "],["string",", "],["collection",": "],["CommandManager",") => "],["T"]]]}],"returns":[[["Array","<"],["T",">"]]],"meta":{"line":211,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"mapValues","description":"Maps each item to another value into a collection. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","see":[],"examples":["collection.mapValues(user => user.tag);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function that produces an element of the new collection, taking three arguments","optional":false,"type":[[["("],["value",": "],["Command",", "],["key",": "],["string",", "],["collection",": "],["CommandManager",") => "],["T"]]]}],"returns":[[["Collection","<"],["string",", "],["T",">"]]],"meta":{"line":223,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"partition","description":"Partitions the collection into two collections where the first collection\ncontains the items that passed and the second contains the items that failed.","see":[],"examples":["const [big, small] = collection.partition(guild => guild.memberCount > 250);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function used to test (should return a boolean)","optional":false,"type":[[["("],["value",": "],["Command",", "],["key",": "],["string",", "],["collection",": "],["CommandManager",") => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["["],["Collection","<"],["K2",", "],["Command",">, "],["Collection","<"],["Exclude","<"],["string",", "],["K2",">, "],["Command",">]"]]],"meta":{"line":183,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"random","description":"Obtains unique random value(s) from this collection.","returns":[[["Command"]]],"returnsDescription":"A single value if no amount is provided or an array of values","meta":{"line":103,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"randomKey","description":"Obtains unique random key(s) from this collection.","returns":[[["string"]]],"returnsDescription":"A single key if no amount is provided or an array","meta":{"line":112,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"reduce","description":"Applies a function to produce a single value. Identical in behavior to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","see":[],"examples":["collection.reduce((acc, guild) => acc + guild.memberCount, 0);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`","optional":false,"type":[[["("],["accumulator",": "],["T",", "],["value",": "],["Command",", "],["key",": "],["string",", "],["collection",": "],["CommandManager",") => "],["T"]]]},{"name":"initialValue","description":"Starting value for the accumulator","optional":true,"type":[[["T"]]]}],"returns":[[["T"]]],"meta":{"line":264,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"register","params":[{"name":"command","optional":false,"type":[[["any"]]]}],"returns":[[["CommandManager"]]],"meta":{"line":9,"file":"CommandManager.ts","path":"src/lib/managers"}},{"name":"set","params":[{"name":"key","optional":false,"type":[[["string"]]]},{"name":"value","optional":false,"type":[[["Command"]]]}],"returns":[[["CommandManager"]]]},{"name":"some","description":"Checks if there exists an item that passes a test. Identical in behavior to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","see":[],"examples":["collection.some(user => user.discriminator === '0000');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function used to test (should return a boolean)","optional":false,"type":[[["("],["value",": "],["Command",", "],["key",": "],["string",", "],["collection",": "],["CommandManager",") => "],["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":235,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"sort","description":"The sort method sorts the items of a collection in place and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.","see":[],"examples":["collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value, according to the string conversion of each element.","optional":true,"type":[[["Comparator","<"],["string",", "],["Command",">"]]]}],"returns":[[["CommandManager"]]],"meta":{"line":332,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"sorted","description":"The sorted method sorts the items of a collection and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.","see":[],"examples":["collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.","optional":true,"type":[[["Comparator","<"],["string",", "],["Command",">"]]]}],"returns":[[["Collection","<"],["string",", "],["Command",">"]]],"meta":{"line":357,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"sweep","description":"Removes items that satisfy the provided filter function.","params":[{"name":"fn","description":"Function used to test (should return a boolean)","optional":false,"type":[[["("],["value",": "],["Command",", "],["key",": "],["string",", "],["collection",": "],["CommandManager",") => "],["boolean"]]]}],"returns":[[["number"]]],"returnsDescription":"The number of removed entries","meta":{"line":154,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"tap","description":"Runs a function on the collection and returns the collection.","see":[],"examples":["collection\n .tap(coll => console.log(coll.size))\n .filter(user => user.bot)\n .tap(coll => console.log(coll.size))"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function to execute","optional":false,"type":[[["("],["collection",": "],["CommandManager",") => "],["void"]]]}],"returns":[[["CommandManager"]]],"meta":{"line":293,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"toJSON","returns":[[["Array","<"],["Command",">"]]],"meta":{"line":358,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"unregister","params":[{"name":"commandName","optional":false,"type":[[["string"]]]}],"returns":[[["Command"]]],"meta":{"line":21,"file":"CommandManager.ts","path":"src/lib/managers"}},{"name":"values","description":"Returns an iterable of values in the map","returns":[[["IterableIterator","<"],["Command",">"]]]}],"meta":{"line":6,"file":"CommandManager.ts","path":"src/lib/managers"}},{"name":"Component","construct":{"name":"constructor","params":[{"name":"name","optional":false,"type":[[["string"]]]},{"name":"options","optional":false,"type":[[["ComponentOptions"]]]}],"returns":[[["Component"]]],"meta":{"line":31,"file":"Component.ts","path":"src/lib/structures"}},"props":[{"name":"client","type":[[["GClient","<"],["boolean",">"]]],"meta":{"line":22,"file":"Component.ts","path":"src/lib/structures"}},{"name":"cooldown","type":[[["string"]]],"meta":{"line":27,"file":"Component.ts","path":"src/lib/structures"}},{"name":"guildId","type":[[["string"]]],"meta":{"line":26,"file":"Component.ts","path":"src/lib/structures"}},{"name":"inhibitors","readonly":true,"default":"[]","type":[[["ComponentInhibitors"]]],"meta":{"line":25,"file":"Component.ts","path":"src/lib/structures"}},{"name":"name","readonly":true,"type":[[["string"]]],"meta":{"line":23,"file":"Component.ts","path":"src/lib/structures"}},{"name":"onError","readonly":true,"type":[[["("],["ctx",": "],["ComponentContext",", "],["error",": "],["any",") => "],["any"]]],"meta":{"line":29,"file":"Component.ts","path":"src/lib/structures"}},{"name":"run","readonly":true,"type":[[["("],["ctx",": "],["ComponentContext",") => "],["any"]]],"meta":{"line":28,"file":"Component.ts","path":"src/lib/structures"}},{"name":"type","readonly":true,"type":[[["Array","<"],["ComponentType",">"]]],"meta":{"line":24,"file":"Component.ts","path":"src/lib/structures"}}],"methods":[{"name":"inhibit","params":[{"name":"ctx","optional":false,"type":[[["ComponentContext"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":51,"file":"Component.ts","path":"src/lib/structures"}},{"name":"initialize","params":[{"name":"client","optional":false,"type":[[["GClient","<"],["boolean",">"]]]}],"returns":[[["void"]]],"meta":{"line":40,"file":"Component.ts","path":"src/lib/structures"}},{"name":"unregister","returns":[[["void"]]],"meta":{"line":47,"file":"Component.ts","path":"src/lib/structures"}},{"name":"validate","scope":"static","access":"private","params":[{"name":"name","optional":false,"type":[[["string"]]]},{"name":"options","optional":false,"type":[[["ComponentOptions"]]]},{"name":"run","optional":false,"type":[[["("],["ctx",": "],["ComponentContext",") => "],["any"]]]}],"returns":[[["void"]]],"meta":{"line":64,"file":"Component.ts","path":"src/lib/structures"}}],"meta":{"line":21,"file":"Component.ts","path":"src/lib/structures"}},{"name":"ComponentManager","extends":["Collection<string, Component>"],"construct":{"name":"constructor","params":[{"name":"entries","optional":true,"type":[[["readonly"," "],["Array","<"],["readonly"," ["],["string",", "],["Component","]>"]]]}],"returns":[[["ComponentManager"]]]},"props":[{"name":"[toStringTag]","readonly":true,"type":[[["string"]]],"meta":{"line":135,"file":"lib.es2015.symbol.wellknown.d.ts","path":"node_modules/typescript/lib"}},{"name":"client","access":"private","type":[[["GClient","<"],["boolean",">"]]],"meta":{"line":7,"file":"ComponentManager.ts","path":"src/lib/managers"}},{"name":"constructor","type":[[["CollectionConstructor"]]],"meta":{"line":17,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"size","readonly":true,"type":[[["number"]]],"meta":{"line":28,"file":"lib.es2015.collection.d.ts","path":"node_modules/typescript/lib"}},{"name":"[species]","scope":"static","readonly":true,"type":[[["MapConstructor"]]],"meta":{"line":317,"file":"lib.es2015.symbol.wellknown.d.ts","path":"node_modules/typescript/lib"}},{"name":"default","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["Collection",")"]]],"meta":{"line":24,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}}],"methods":[{"name":"[iterator]","description":"Returns an iterable of entries in the map.","returns":[[["IterableIterator","<["],["string",", "],["Component","]>"]]]},{"name":"at","description":"Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the item at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.","params":[{"name":"index","description":"The index of the element to obtain","optional":true,"type":[[["number"]]]}],"returns":[[["Component"]]],"meta":{"line":87,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"clear","returns":[[["void"]]]},{"name":"clone","description":"Creates an identical shallow copy of this collection.","see":[],"examples":["const newColl = someColl.clone();"],"abstract":false,"deprecated":false,"emits":[],"returns":[[["Collection","<"],["string",", "],["Component",">"]]],"meta":{"line":301,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"concat","description":"Combines this collection with others into a new collection. None of the source collections are modified.","see":[],"examples":["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"collections","description":"Collections to merge","optional":false,"type":[[["Array","<"],["Collection","<"],["string",", "],["Component",">>"]]]}],"returns":[[["Collection","<"],["string",", "],["Component",">"]]],"meta":{"line":310,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"delete","params":[{"name":"key","optional":false,"type":[[["string"]]]}],"returns":[[["boolean"]]]},{"name":"difference","description":"The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.","params":[{"name":"other","description":"The other Collection to filter against","optional":false,"type":[[["Collection","<"],["string",", "],["Component",">"]]]}],"returns":[[["Collection","<"],["string",", "],["Component",">"]]],"meta":{"line":344,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"each","description":"Identical to\n[Map.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach),\nbut returns the collection instead of undefined.","see":[],"examples":["collection\n .each(user => console.log(user.username))\n .filter(user => user.bot)\n .each(user => console.log(user.username));"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function to execute for each element","optional":false,"type":[[["("],["value",": "],["Component",", "],["key",": "],["string",", "],["collection",": "],["ComponentManager",") => "],["void"]]]}],"returns":[[["ComponentManager"]]],"meta":{"line":279,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"entries","description":"Returns an iterable of key, value pairs for every entry in the map.","returns":[[["IterableIterator","<["],["string",", "],["Component","]>"]]]},{"name":"equals","description":"Checks if this collection shares identical items with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.","params":[{"name":"collection","description":"Collection to compare with","optional":false,"type":[[["Collection","<"],["string",", "],["Component",">"]]]}],"returns":[[["boolean"]]],"returnsDescription":"Whether the collections have identical contents","meta":{"line":320,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"every","description":"Checks if all items passes a test. Identical in behavior to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","see":[],"examples":["collection.every(user => !user.bot);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function used to test (should return a boolean)","optional":false,"type":[[["("],["value",": "],["Component",", "],["key",": "],["string",", "],["collection",": "],["ComponentManager",") => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["this"," "],["is"," "],["Collection","<"],["K2",", "],["Component",">"]]],"meta":{"line":247,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"filter","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.","see":[],"examples":["collection.filter(user => user.username === 'Bob');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"The function to test with (should return boolean)","optional":false,"type":[[["("],["value",": "],["Component",", "],["key",": "],["string",", "],["collection",": "],["ComponentManager",") => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["Collection","<"],["K2",", "],["Component",">"]]],"meta":{"line":167,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"find","description":"Searches for a single item where the given function returns a truthy value. This behaves like\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in Discord.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>","see":[],"examples":["collection.find(user => user.username === 'Bob');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"The function to test with (should return boolean)","optional":false,"type":[[["("],["value",": "],["Component",", "],["key",": "],["string",", "],["collection",": "],["ComponentManager",") => "],["value"," "],["is"," "],["V2"]]]}],"returns":[[["V2"]]],"meta":{"line":127,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"findKey","description":"Searches for the key of a single item where the given function returns a truthy value. This behaves like\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex),\nbut returns the key rather than the positional index.","see":[],"examples":["collection.findKey(user => user.username === 'Bob');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"The function to test with (should return boolean)","optional":false,"type":[[["("],["value",": "],["Component",", "],["key",": "],["string",", "],["collection",": "],["ComponentManager",") => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["K2"]]],"meta":{"line":142,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"first","description":"Obtains the first value(s) in this collection.","returns":[[["Component"]]],"returnsDescription":"A single value if no amount is provided or an array of values, starting from the end if amount is negative","meta":{"line":48,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"firstKey","description":"Obtains the first key(s) in this collection.","returns":[[["string"]]],"returnsDescription":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative","meta":{"line":58,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"flatMap","description":"Maps each item into a Collection, then joins the results into a single Collection. Identical in behavior to\n[Array.flatMap()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap).","see":[],"examples":["collection.flatMap(guild => guild.members.cache);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function that produces a new Collection","optional":false,"type":[[["("],["value",": "],["Component",", "],["key",": "],["string",", "],["collection",": "],["ComponentManager",") => "],["Collection","<"],["string",", "],["T",">"]]]}],"returns":[[["Collection","<"],["string",", "],["T",">"]]],"meta":{"line":199,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"forEach","params":[{"name":"callbackfn","optional":false,"type":[[["("],["value",": "],["Component",", "],["key",": "],["string",", "],["map",": "],["Map","<"],["string",", "],["Component",">) => "],["void"]]]},{"name":"thisArg","optional":true,"type":[[["any"]]]}],"returns":[[["void"]]]},{"name":"get","params":[{"name":"key","optional":false,"type":[[["string"]]]}],"returns":[[["Component"]]]},{"name":"has","params":[{"name":"key","optional":false,"type":[[["string"]]]}],"returns":[[["boolean"]]]},{"name":"hasAll","description":"Checks if all of the elements exist in the collection.","params":[{"name":"keys","description":"The keys of the elements to check for","optional":false,"type":[[["Array","<"],["string",">"]]]}],"returns":[[["boolean"]]],"returnsDescription":"`true` if all of the elements exist, `false` if at least one does not exist.","meta":{"line":32,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"hasAny","description":"Checks if any of the elements exist in the collection.","params":[{"name":"keys","description":"The keys of the elements to check for","optional":false,"type":[[["Array","<"],["string",">"]]]}],"returns":[[["boolean"]]],"returnsDescription":"`true` if any of the elements exist, `false` if none exist.","meta":{"line":40,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"initiate","params":[{"name":"client","optional":false,"type":[[["GClient","<"],["boolean",">"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":31,"file":"ComponentManager.ts","path":"src/lib/managers"}},{"name":"intersect","description":"The intersect method returns a new structure containing items where the keys are present in both original structures.","params":[{"name":"other","description":"The other Collection to filter against","optional":false,"type":[[["Collection","<"],["string",", "],["Component",">"]]]}],"returns":[[["Collection","<"],["string",", "],["Component",">"]]],"meta":{"line":338,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"keyAt","description":"Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the key at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.","params":[{"name":"index","description":"The index of the key to obtain","optional":true,"type":[[["number"]]]}],"returns":[[["string"]]],"meta":{"line":95,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"keys","description":"Returns an iterable of keys in the map","returns":[[["IterableIterator","<"],["string",">"]]]},{"name":"last","description":"Obtains the last value(s) in this collection.","returns":[[["Component"]]],"returnsDescription":"A single value if no amount is provided or an array of values, starting from the start if\namount is negative","meta":{"line":68,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"lastKey","description":"Obtains the last key(s) in this collection.","returns":[[["string"]]],"returnsDescription":"A single key if no amount is provided or an array of keys, starting from the start if\namount is negative","meta":{"line":78,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"map","description":"Maps each item to another value into an array. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","see":[],"examples":["collection.map(user => user.tag);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function that produces an element of the new array, taking three arguments","optional":false,"type":[[["("],["value",": "],["Component",", "],["key",": "],["string",", "],["collection",": "],["ComponentManager",") => "],["T"]]]}],"returns":[[["Array","<"],["T",">"]]],"meta":{"line":211,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"mapValues","description":"Maps each item to another value into a collection. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","see":[],"examples":["collection.mapValues(user => user.tag);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function that produces an element of the new collection, taking three arguments","optional":false,"type":[[["("],["value",": "],["Component",", "],["key",": "],["string",", "],["collection",": "],["ComponentManager",") => "],["T"]]]}],"returns":[[["Collection","<"],["string",", "],["T",">"]]],"meta":{"line":223,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"partition","description":"Partitions the collection into two collections where the first collection\ncontains the items that passed and the second contains the items that failed.","see":[],"examples":["const [big, small] = collection.partition(guild => guild.memberCount > 250);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function used to test (should return a boolean)","optional":false,"type":[[["("],["value",": "],["Component",", "],["key",": "],["string",", "],["collection",": "],["ComponentManager",") => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["["],["Collection","<"],["K2",", "],["Component",">, "],["Collection","<"],["Exclude","<"],["string",", "],["K2",">, "],["Component",">]"]]],"meta":{"line":183,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"random","description":"Obtains unique random value(s) from this collection.","returns":[[["Component"]]],"returnsDescription":"A single value if no amount is provided or an array of values","meta":{"line":103,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"randomKey","description":"Obtains unique random key(s) from this collection.","returns":[[["string"]]],"returnsDescription":"A single key if no amount is provided or an array","meta":{"line":112,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"reduce","description":"Applies a function to produce a single value. Identical in behavior to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","see":[],"examples":["collection.reduce((acc, guild) => acc + guild.memberCount, 0);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`","optional":false,"type":[[["("],["accumulator",": "],["T",", "],["value",": "],["Component",", "],["key",": "],["string",", "],["collection",": "],["ComponentManager",") => "],["T"]]]},{"name":"initialValue","description":"Starting value for the accumulator","optional":true,"type":[[["T"]]]}],"returns":[[["T"]]],"meta":{"line":264,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"register","params":[{"name":"component","optional":false,"type":[[["Component"]]]}],"returns":[[["ComponentManager"]]],"meta":{"line":9,"file":"ComponentManager.ts","path":"src/lib/managers"}},{"name":"set","params":[{"name":"key","optional":false,"type":[[["string"]]]},{"name":"value","optional":false,"type":[[["Component"]]]}],"returns":[[["ComponentManager"]]]},{"name":"some","description":"Checks if there exists an item that passes a test. Identical in behavior to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","see":[],"examples":["collection.some(user => user.discriminator === '0000');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function used to test (should return a boolean)","optional":false,"type":[[["("],["value",": "],["Component",", "],["key",": "],["string",", "],["collection",": "],["ComponentManager",") => "],["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":235,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"sort","description":"The sort method sorts the items of a collection in place and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.","see":[],"examples":["collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value, according to the string conversion of each element.","optional":true,"type":[[["Comparator","<"],["string",", "],["Component",">"]]]}],"returns":[[["ComponentManager"]]],"meta":{"line":332,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"sorted","description":"The sorted method sorts the items of a collection and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.","see":[],"examples":["collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.","optional":true,"type":[[["Comparator","<"],["string",", "],["Component",">"]]]}],"returns":[[["Collection","<"],["string",", "],["Component",">"]]],"meta":{"line":357,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"sweep","description":"Removes items that satisfy the provided filter function.","params":[{"name":"fn","description":"Function used to test (should return a boolean)","optional":false,"type":[[["("],["value",": "],["Component",", "],["key",": "],["string",", "],["collection",": "],["ComponentManager",") => "],["boolean"]]]}],"returns":[[["number"]]],"returnsDescription":"The number of removed entries","meta":{"line":154,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"tap","description":"Runs a function on the collection and returns the collection.","see":[],"examples":["collection\n .tap(coll => console.log(coll.size))\n .filter(user => user.bot)\n .tap(coll => console.log(coll.size))"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function to execute","optional":false,"type":[[["("],["collection",": "],["ComponentManager",") => "],["void"]]]}],"returns":[[["ComponentManager"]]],"meta":{"line":293,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"toJSON","returns":[[["Array","<"],["Component",">"]]],"meta":{"line":358,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"unregister","params":[{"name":"componentName","optional":false,"type":[[["string"]]]}],"returns":[[["Component"]]],"meta":{"line":21,"file":"ComponentManager.ts","path":"src/lib/managers"}},{"name":"values","description":"Returns an iterable of values in the map","returns":[[["IterableIterator","<"],["Component",">"]]]}],"meta":{"line":6,"file":"ComponentManager.ts","path":"src/lib/managers"}},{"name":"GClient","extends":["Client<Ready>"],"construct":{"name":"constructor","params":[{"name":"options","optional":false,"type":[[["GClientOptions"]]]}],"returns":[[["GClient","<"],["Ready",">"]]],"meta":{"line":32,"file":"GClient.ts","path":"src/lib"}},"props":[{"name":"application","type":[[["If","<"],["Ready",", "],["ClientApplication",", "],["null",">"]]],"meta":{"line":472,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"channels","type":[[["ChannelManager"]]],"meta":{"line":473,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"emojis","readonly":true,"type":[[["BaseGuildEmojiManager"]]],"meta":{"line":474,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"gcommands","default":"GClient.gcommands","type":[[["CommandManager"]]],"meta":{"line":93,"file":"GClient.ts","path":"src/lib"}},{"name":"gcomponents","default":"GClient.gcomponents","type":[[["ComponentManager"]]],"meta":{"line":94,"file":"GClient.ts","path":"src/lib"}},{"name":"ghandlers","default":"GClient.ghandlers","type":[[["HandlerManager"]]],"meta":{"line":91,"file":"GClient.ts","path":"src/lib"}},{"name":"glisteners","default":"GClient.glisteners","type":[[["ListenerManager"]]],"meta":{"line":95,"file":"GClient.ts","path":"src/lib"}},{"name":"gplugins","default":"GClient.gplugins","type":[[["PluginManager"]]],"meta":{"line":92,"file":"GClient.ts","path":"src/lib"}},{"name":"guilds","type":[[["GuildManager"]]],"meta":{"line":475,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"options","default":"GClient.options","type":[[["GClientOptions"]]],"meta":{"line":97,"file":"GClient.ts","path":"src/lib"}},{"name":"readyAt","type":[[["If","<"],["Ready",", "],["Date",", "],["null",">"]]],"meta":{"line":477,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"readyTimestamp","readonly":true,"type":[[["If","<"],["Ready",", "],["number",", "],["null",">"]]],"meta":{"line":478,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"registerDirectories","default":"GClient.registerDirectories","type":[[["("],["paths",": "],["Array","<"],["string",">) => "],["Promise","<"],["void",">"]]],"meta":{"line":99,"file":"GClient.ts","path":"src/lib"}},{"name":"registerDirectory","default":"GClient.registerDirectory","type":[[["("],["path",": "],["string",") => "],["Promise","<"],["void",">"]]],"meta":{"line":98,"file":"GClient.ts","path":"src/lib"}},{"name":"responses","default":"GClient.responses","type":[[["Record","<"],["string",", "],["string",">"]]],"meta":{"line":96,"file":"GClient.ts","path":"src/lib"}},{"name":"setCooldown","default":"GClient.setCooldown","type":[[["("],["cooldown",": "],["string",") => "],["void"]]],"meta":{"line":102,"file":"GClient.ts","path":"src/lib"}},{"name":"setDevServer","default":"GClient.setDevServer","type":[[["("],["guildId",": "],["string",") => "],["void"]]],"meta":{"line":101,"file":"GClient.ts","path":"src/lib"}},{"name":"setMessagePrefix","default":"GClient.setMessagePrefix","type":[[["("],["prefix",": "],["string",") => "],["void"]]],"meta":{"line":103,"file":"GClient.ts","path":"src/lib"}},{"name":"setResponses","default":"GClient.setResponses","type":[[["("],["responses",": "],["Record","<"],["string",", "],["string",">) => "],["void"]]],"meta":{"line":100,"file":"GClient.ts","path":"src/lib"}},{"name":"shard","type":[[["ShardClientUtil"]]],"meta":{"line":479,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"token","type":[[["If","<"],["Ready",", "],["string",", "],["string",">"]]],"meta":{"line":480,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"uptime","type":[[["If","<"],["Ready",", "],["number",", "],["null",">"]]],"meta":{"line":481,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"user","type":[[["If","<"],["Ready",", "],["ClientUser",", "],["null",">"]]],"meta":{"line":482,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"users","type":[[["UserManager"]]],"meta":{"line":483,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"voice","type":[[["ClientVoiceManager"]]],"meta":{"line":484,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"ws","type":[[["WebSocketManager"]]],"meta":{"line":485,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"captureRejectionSymbol","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["captureRejectionSymbol",")"]]],"meta":{"line":273,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"captureRejections","description":"Sets or gets the default captureRejection value for all emitters.","scope":"static","type":[[["boolean"]]],"meta":{"line":278,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"defaultMaxListeners","scope":"static","type":[[["number"]]],"meta":{"line":279,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"errorMonitor","description":"This symbol shall be used to install a listener for only monitoring `'error'`\nevents. Listeners installed using this symbol are called before the regular\n`'error'` listeners are called.","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["errorMonitor",")"]]],"meta":{"line":272,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"gcommands","scope":"static","type":[[["CommandManager"]]],"meta":{"line":26,"file":"GClient.ts","path":"src/lib"}},{"name":"gcomponents","scope":"static","type":[[["ComponentManager"]]],"meta":{"line":27,"file":"GClient.ts","path":"src/lib"}},{"name":"ghandlers","scope":"static","type":[[["HandlerManager"]]],"meta":{"line":24,"file":"GClient.ts","path":"src/lib"}},{"name":"glisteners","scope":"static","type":[[["ListenerManager"]]],"meta":{"line":28,"file":"GClient.ts","path":"src/lib"}},{"name":"gplugins","scope":"static","type":[[["PluginManager"]]],"meta":{"line":25,"file":"GClient.ts","path":"src/lib"}},{"name":"options","scope":"static","type":[[["GClientOptions"]]],"meta":{"line":30,"file":"GClient.ts","path":"src/lib"}},{"name":"responses","scope":"static","default":"Responses","type":[[["Record","<"],["string",", "],["string",">"]]],"meta":{"line":29,"file":"GClient.ts","path":"src/lib"}}],"methods":[{"name":"addListener","description":"Alias for `emitter.on(eventName, listener)`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["GClient","<"],["Ready",">"]]]},{"name":"destroy","returns":[[["void"]]],"meta":{"line":486,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"emit","params":[{"name":"event","optional":false,"type":[[["K"]]]},{"name":"args","optional":false,"type":[[["ClientEvents","["],["K","]"]]]}],"returns":[[["boolean"]]],"meta":{"line":513,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"eventNames","description":"Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or `Symbol`s.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"returns":[[["Array","<"],["string"," | "],["symbol",">"]]]},{"name":"fetchGuildPreview","params":[{"name":"guild","optional":false,"type":[[["GuildResolvable"]]]}],"returns":[[["Promise","<"],["GuildPreview",">"]]],"meta":{"line":487,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"fetchGuildTemplate","params":[{"name":"template","optional":false,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildTemplate",">"]]],"meta":{"line":489,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"fetchGuildWidget","params":[{"name":"guild","optional":false,"type":[[["GuildResolvable"]]]}],"returns":[[["Promise","<"],["Widget",">"]]],"meta":{"line":494,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"fetchInvite","params":[{"name":"invite","optional":false,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":488,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"fetchPremiumStickerPacks","returns":[[["Promise","<"],["Collection","<"],["string",", "],["StickerPack",">>"]]],"meta":{"line":492,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"fetchSticker","params":[{"name":"id","optional":false,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Sticker",">"]]],"meta":{"line":491,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"fetchVoiceRegions","returns":[[["Promise","<"],["Collection","<"],["string",", "],["VoiceRegion",">>"]]],"meta":{"line":490,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"fetchWebhook","params":[{"name":"id","optional":false,"type":[[["string"]]]},{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Webhook",">"]]],"meta":{"line":493,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"generateInvite","params":[{"name":"options","optional":true,"type":[[["InviteGenerationOptions"]]]}],"returns":[[["string"]]],"meta":{"line":495,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"getMaxListeners","description":"Returns the current max listener value for the `EventEmitter` which is either\nset by `emitter.setMaxListeners(n)` or defaults to {@link defaultMaxListeners}.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"returns":[[["number"]]]},{"name":"isReady","returns":[[["this"," "],["is"," "],["Client","<"],["true",">"]]],"meta":{"line":497,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"listenerCount","description":"Returns the number of listeners listening to the event named `eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","description":"The name of the event being listened for","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["number"]]]},{"name":"listeners","description":"Returns a copy of the array of listeners for the event named `eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["Array","<"],["Function",">"]]]},{"name":"login","params":[{"name":"token","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":81,"file":"GClient.ts","path":"src/lib"}},{"name":"off","params":[{"name":"event","optional":false,"type":[[["K"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["ClientEvents","["],["K","]) => "],["Awaitable","<"],["void",">"]]]}],"returns":[[["GClient","<"],["Ready",">"]]],"meta":{"line":516,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"on","params":[{"name":"event","optional":false,"type":[[["K"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["ClientEvents","["],["K","]) => "],["Awaitable","<"],["void",">"]]]}],"returns":[[["GClient","<"],["Ready",">"]]],"meta":{"line":501,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"once","params":[{"name":"event","optional":false,"type":[[["K"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["ClientEvents","["],["K","]) => "],["Awaitable","<"],["void",">"]]]}],"returns":[[["GClient","<"],["Ready",">"]]],"meta":{"line":507,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"prependListener","description":"Adds the `listener` function to the _beginning_ of the listeners array for the\nevent named `eventName`. No checks are made to see if the `listener` has\nalready been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\ntimes.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","description":"The name of the event.","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","description":"The callback function","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["GClient","<"],["Ready",">"]]]},{"name":"prependOnceListener","description":"Adds a **one-time**`listener` function for the event named `eventName` to the_beginning_ of the listeners array. The next time `eventName` is triggered, this\nlistener is removed, and then invoked.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","description":"The name of the event.","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","description":"The callback function","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["GClient","<"],["Ready",">"]]]},{"name":"rawListeners","description":"Returns a copy of the array of listeners for the event named `eventName`,\nincluding any wrappers (such as those created by `.once()`).","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["Array","<"],["Function",">"]]]},{"name":"removeAllListeners","params":[{"name":"event","optional":true,"type":[[["K"]]]}],"returns":[[["GClient","<"],["Ready",">"]]],"meta":{"line":522,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"removeListener","description":"Removes the specified `listener` from the listener array for the event named`eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["GClient","<"],["Ready",">"]]]},{"name":"setMaxListeners","description":"By default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `emitter.setMaxListeners()` method allows the limit to be\nmodified for this specific `EventEmitter` instance. The value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"n","optional":false,"type":[[["number"]]]}],"returns":[[["GClient","<"],["Ready",">"]]]},{"name":"sweepMessages","params":[{"name":"lifetime","optional":true,"type":[[["number"]]]}],"returns":[[["number"]]],"meta":{"line":498,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"toJSON","returns":[[["unknown"]]],"meta":{"line":499,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"getEventListeners","description":"Returns a copy of the array of listeners for the event named `eventName`.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"emitter","optional":false,"type":[[["DOMEventTarget"," | "],["EventEmitter"]]]},{"name":"name","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["Array","<"],["Function",">"]]],"meta":{"line":262,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"listenerCount","description":"A class method that returns the number of listeners for the given `eventName`registered on the given `emitter`.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":true,"emits":[],"params":[{"name":"emitter","description":"The emitter to query","optional":false,"type":[[["EventEmitter"]]]},{"name":"eventName","description":"The event name","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["number"]]],"meta":{"line":234,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"on","description":"```js\nconst { on, EventEmitter } = require('events');","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"emitter","optional":false,"type":[[["EventEmitter"]]]},{"name":"eventName","description":"The name of the event being listened for","optional":false,"type":[[["string"]]]},{"name":"options","optional":true,"type":[[["StaticEventEmitterOptions"]]]}],"returns":[[["AsyncIterableIterator","<"],["any",">"]]],"returnsDescription":"that iterates `eventName` events emitted by the `emitter`","meta":{"line":217,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"once","description":"Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\nevent or that is rejected if the `EventEmitter` emits `'error'` while waiting.\nThe `Promise` will resolve with an array of all the arguments emitted to the\ngiven event.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"emitter","optional":false,"type":[[["NodeEventTarget"]]]},{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"options","optional":true,"type":[[["StaticEventEmitterOptions"]]]}],"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":157,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"registerDirectories","scope":"static","params":[{"name":"paths","optional":false,"type":[[["Array","<"],["string",">"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":59,"file":"GClient.ts","path":"src/lib"}},{"name":"registerDirectory","scope":"static","params":[{"name":"path","optional":false,"type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":55,"file":"GClient.ts","path":"src/lib"}},{"name":"setCooldown","scope":"static","params":[{"name":"cooldown","optional":false,"type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":73,"file":"GClient.ts","path":"src/lib"}},{"name":"setDevServer","scope":"static","params":[{"name":"guildId","optional":false,"type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":65,"file":"GClient.ts","path":"src/lib"}},{"name":"setMessagePrefix","scope":"static","params":[{"name":"prefix","optional":false,"type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":77,"file":"GClient.ts","path":"src/lib"}},{"name":"setResponses","scope":"static","params":[{"name":"responses","optional":false,"type":[[["Record","<"],["string",", "],["string",">"]]]}],"returns":[[["void"]]],"meta":{"line":69,"file":"GClient.ts","path":"src/lib"}}],"meta":{"line":23,"file":"GClient.ts","path":"src/lib"}},{"name":"HandlerManager","construct":{"name":"constructor","returns":[[["HandlerManager"]]],"meta":{"line":24,"file":"HandlerManager.ts","path":"src/lib/managers"}},"props":[{"name":"autocompleteHandler","type":[[["("],["interaction",": "],["AutocompleteInteraction","<"],["CacheType",">) => "],["any"]]],"meta":{"line":21,"file":"HandlerManager.ts","path":"src/lib/managers"}},{"name":"componentHandler","type":[[["("],["interaction",": "],["MessageComponentInteraction","<"],["CacheType",">) => "],["any"]]],"meta":{"line":20,"file":"HandlerManager.ts","path":"src/lib/managers"}},{"name":"cooldownHandler","type":[[["("],["userId",": "],["string",", "],["item",": "],["Command"," | "],["Component",", "],["collection",": "],["Collection","<"],["string",", "],["Collection","<"],["string",", "],["number",">>) => "],["number"," | "],["void"]]],"meta":{"line":22,"file":"HandlerManager.ts","path":"src/lib/managers"}},{"name":"interactionCommandHandler","type":[[["("],["interaction",": "],["CommandInteraction","<"],["CacheType","> | "],["ContextMenuInteraction","<"],["CacheType",">) => "],["any"]]],"meta":{"line":18,"file":"HandlerManager.ts","path":"src/lib/managers"}},{"name":"messageCommandHandler","type":[[["("],["message",": "],["Message","<"],["boolean",">, "],["commandName",": "],["string",", "],["args",": "],["Array","<"],["string","> | "],["Array","<"],["object",">) => "],["any"]]],"meta":{"line":19,"file":"HandlerManager.ts","path":"src/lib/managers"}}],"methods":[{"name":"setAutocompleteHandler","params":[{"name":"handler","optional":false,"type":[[["("],["interaction",": "],["AutocompleteInteraction","<"],["CacheType",">) => "],["any"]]]}],"returns":[[["HandlerManager"]]],"meta":{"line":50,"file":"HandlerManager.ts","path":"src/lib/managers"}},{"name":"setComponentHandler","params":[{"name":"handler","optional":false,"type":[[["("],["interaction",": "],["MessageComponentInteraction","<"],["CacheType",">) => "],["any"]]]}],"returns":[[["HandlerManager"]]],"meta":{"line":44,"file":"HandlerManager.ts","path":"src/lib/managers"}},{"name":"setCooldownHandler","params":[{"name":"handler","optional":false,"type":[[["("],["userId",": "],["string",", "],["item",": "],["Command"," | "],["Component",", "],["collection",": "],["Collection","<"],["string",", "],["Collection","<"],["string",", "],["number",">>) => "],["number"," | "],["void"]]]}],"returns":[[["HandlerManager"]]],"meta":{"line":56,"file":"HandlerManager.ts","path":"src/lib/managers"}},{"name":"setInteractionCommandHandler","params":[{"name":"handler","optional":false,"type":[[["("],["interaction",": "],["CommandInteraction","<"],["CacheType","> | "],["ContextMenuInteraction","<"],["CacheType",">) => "],["any"]]]}],"returns":[[["HandlerManager"]]],"meta":{"line":32,"file":"HandlerManager.ts","path":"src/lib/managers"}},{"name":"setMessageCommandHandler","params":[{"name":"handler","optional":false,"type":[[["("],["message",": "],["Message","<"],["boolean",">, "],["commandName",": "],["string",", "],["args",": "],["Array","<"],["string","> | "],["Array","<"],["object",">) => "],["any"]]]}],"returns":[[["HandlerManager"]]],"meta":{"line":38,"file":"HandlerManager.ts","path":"src/lib/managers"}}],"meta":{"line":17,"file":"HandlerManager.ts","path":"src/lib/managers"}},{"name":"Listener","construct":{"name":"constructor","params":[{"name":"event","optional":false,"type":[[["Event"]]]},{"name":"options","optional":false,"type":[[["ListenerOptions","<"],["Event",">"]]]}],"returns":[[["Listener","<"],["Event",">"]]],"meta":{"line":19,"file":"Listener.ts","path":"src/lib/structures"}},"props":[{"name":"client","type":[[["GClient","<"],["boolean",">"]]],"meta":{"line":13,"file":"Listener.ts","path":"src/lib/structures"}},{"name":"event","readonly":true,"type":[[["Event"]]],"meta":{"line":14,"file":"Listener.ts","path":"src/lib/structures"}},{"name":"name","readonly":true,"type":[[["string"]]],"meta":{"line":15,"file":"Listener.ts","path":"src/lib/structures"}},{"name":"once","readonly":true,"type":[[["boolean"]]],"meta":{"line":16,"file":"Listener.ts","path":"src/lib/structures"}},{"name":"run","readonly":true,"type":[[["("],["args",": "],["Event"," "],["extends"," "],["keyof"," "],["ClientEvents"," ? "],["ClientEvents","["],["Event","] : "],["Array","<"],["unknown",">) => "],["any"]]],"meta":{"line":17,"file":"Listener.ts","path":"src/lib/structures"}}],"methods":[{"name":"_run","access":"private","params":[{"name":"args","optional":false,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":34,"file":"Listener.ts","path":"src/lib/structures"}},{"name":"initialize","params":[{"name":"client","optional":false,"type":[[["GClient","<"],["boolean",">"]]]}],"returns":[[["void"]]],"meta":{"line":28,"file":"Listener.ts","path":"src/lib/structures"}},{"name":"unregister","returns":[[["Listener","<"],["any",">"]]],"meta":{"line":38,"file":"Listener.ts","path":"src/lib/structures"}},{"name":"validate","scope":"static","access":"private","params":[{"name":"event","optional":false,"type":[[["string"]]]},{"name":"options","optional":false,"type":[[["ListenerOptions","<"],["any",">"]]]}],"returns":[[["void"]]],"meta":{"line":42,"file":"Listener.ts","path":"src/lib/structures"}}],"meta":{"line":12,"file":"Listener.ts","path":"src/lib/structures"}},{"name":"ListenerManager","extends":["Collection<string, Listener<any>>"],"construct":{"name":"constructor","params":[{"name":"entries","optional":true,"type":[[["readonly"," "],["Array","<"],["readonly"," ["],["string",", "],["Listener","<"],["any",">]>"]]]}],"returns":[[["ListenerManager"]]]},"props":[{"name":"[toStringTag]","readonly":true,"type":[[["string"]]],"meta":{"line":135,"file":"lib.es2015.symbol.wellknown.d.ts","path":"node_modules/typescript/lib"}},{"name":"client","access":"private","type":[[["GClient","<"],["boolean",">"]]],"meta":{"line":7,"file":"ListenerManager.ts","path":"src/lib/managers"}},{"name":"constructor","type":[[["CollectionConstructor"]]],"meta":{"line":17,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"size","readonly":true,"type":[[["number"]]],"meta":{"line":28,"file":"lib.es2015.collection.d.ts","path":"node_modules/typescript/lib"}},{"name":"[species]","scope":"static","readonly":true,"type":[[["MapConstructor"]]],"meta":{"line":317,"file":"lib.es2015.symbol.wellknown.d.ts","path":"node_modules/typescript/lib"}},{"name":"default","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["Collection",")"]]],"meta":{"line":24,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}}],"methods":[{"name":"[iterator]","description":"Returns an iterable of entries in the map.","returns":[[["IterableIterator","<["],["string",", "],["Listener","<"],["any",">]>"]]]},{"name":"at","description":"Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the item at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.","params":[{"name":"index","description":"The index of the element to obtain","optional":true,"type":[[["number"]]]}],"returns":[[["Listener","<"],["any",">"]]],"meta":{"line":87,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"clear","returns":[[["void"]]]},{"name":"clone","description":"Creates an identical shallow copy of this collection.","see":[],"examples":["const newColl = someColl.clone();"],"abstract":false,"deprecated":false,"emits":[],"returns":[[["Collection","<"],["string",", "],["Listener","<"],["any",">>"]]],"meta":{"line":301,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"concat","description":"Combines this collection with others into a new collection. None of the source collections are modified.","see":[],"examples":["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"collections","description":"Collections to merge","optional":false,"type":[[["Array","<"],["Collection","<"],["string",", "],["Listener","<"],["any",">>>"]]]}],"returns":[[["Collection","<"],["string",", "],["Listener","<"],["any",">>"]]],"meta":{"line":310,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"delete","params":[{"name":"key","optional":false,"type":[[["string"]]]}],"returns":[[["boolean"]]]},{"name":"difference","description":"The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.","params":[{"name":"other","description":"The other Collection to filter against","optional":false,"type":[[["Collection","<"],["string",", "],["Listener","<"],["any",">>"]]]}],"returns":[[["Collection","<"],["string",", "],["Listener","<"],["any",">>"]]],"meta":{"line":344,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"each","description":"Identical to\n[Map.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach),\nbut returns the collection instead of undefined.","see":[],"examples":["collection\n .each(user => console.log(user.username))\n .filter(user => user.bot)\n .each(user => console.log(user.username));"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function to execute for each element","optional":false,"type":[[["("],["value",": "],["Listener","<"],["any",">, "],["key",": "],["string",", "],["collection",": "],["ListenerManager",") => "],["void"]]]}],"returns":[[["ListenerManager"]]],"meta":{"line":279,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"entries","description":"Returns an iterable of key, value pairs for every entry in the map.","returns":[[["IterableIterator","<["],["string",", "],["Listener","<"],["any",">]>"]]]},{"name":"equals","description":"Checks if this collection shares identical items with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.","params":[{"name":"collection","description":"Collection to compare with","optional":false,"type":[[["Collection","<"],["string",", "],["Listener","<"],["any",">>"]]]}],"returns":[[["boolean"]]],"returnsDescription":"Whether the collections have identical contents","meta":{"line":320,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"every","description":"Checks if all items passes a test. Identical in behavior to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","see":[],"examples":["collection.every(user => !user.bot);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function used to test (should return a boolean)","optional":false,"type":[[["("],["value",": "],["Listener","<"],["any",">, "],["key",": "],["string",", "],["collection",": "],["ListenerManager",") => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["this"," "],["is"," "],["Collection","<"],["K2",", "],["Listener","<"],["any",">>"]]],"meta":{"line":247,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"filter","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.","see":[],"examples":["collection.filter(user => user.username === 'Bob');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"The function to test with (should return boolean)","optional":false,"type":[[["("],["value",": "],["Listener","<"],["any",">, "],["key",": "],["string",", "],["collection",": "],["ListenerManager",") => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["Collection","<"],["K2",", "],["Listener","<"],["any",">>"]]],"meta":{"line":167,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"find","description":"Searches for a single item where the given function returns a truthy value. This behaves like\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in Discord.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>","see":[],"examples":["collection.find(user => user.username === 'Bob');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"The function to test with (should return boolean)","optional":false,"type":[[["("],["value",": "],["Listener","<"],["any",">, "],["key",": "],["string",", "],["collection",": "],["ListenerManager",") => "],["value"," "],["is"," "],["V2"]]]}],"returns":[[["V2"]]],"meta":{"line":127,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"findKey","description":"Searches for the key of a single item where the given function returns a truthy value. This behaves like\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex),\nbut returns the key rather than the positional index.","see":[],"examples":["collection.findKey(user => user.username === 'Bob');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"The function to test with (should return boolean)","optional":false,"type":[[["("],["value",": "],["Listener","<"],["any",">, "],["key",": "],["string",", "],["collection",": "],["ListenerManager",") => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["K2"]]],"meta":{"line":142,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"first","description":"Obtains the first value(s) in this collection.","returns":[[["Listener","<"],["any",">"]]],"returnsDescription":"A single value if no amount is provided or an array of values, starting from the end if amount is negative","meta":{"line":48,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"firstKey","description":"Obtains the first key(s) in this collection.","returns":[[["string"]]],"returnsDescription":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative","meta":{"line":58,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"flatMap","description":"Maps each item into a Collection, then joins the results into a single Collection. Identical in behavior to\n[Array.flatMap()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap).","see":[],"examples":["collection.flatMap(guild => guild.members.cache);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function that produces a new Collection","optional":false,"type":[[["("],["value",": "],["Listener","<"],["any",">, "],["key",": "],["string",", "],["collection",": "],["ListenerManager",") => "],["Collection","<"],["string",", "],["T",">"]]]}],"returns":[[["Collection","<"],["string",", "],["T",">"]]],"meta":{"line":199,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"forEach","params":[{"name":"callbackfn","optional":false,"type":[[["("],["value",": "],["Listener","<"],["any",">, "],["key",": "],["string",", "],["map",": "],["Map","<"],["string",", "],["Listener","<"],["any",">>) => "],["void"]]]},{"name":"thisArg","optional":true,"type":[[["any"]]]}],"returns":[[["void"]]]},{"name":"get","params":[{"name":"key","optional":false,"type":[[["string"]]]}],"returns":[[["Listener","<"],["any",">"]]]},{"name":"has","params":[{"name":"key","optional":false,"type":[[["string"]]]}],"returns":[[["boolean"]]]},{"name":"hasAll","description":"Checks if all of the elements exist in the collection.","params":[{"name":"keys","description":"The keys of the elements to check for","optional":false,"type":[[["Array","<"],["string",">"]]]}],"returns":[[["boolean"]]],"returnsDescription":"`true` if all of the elements exist, `false` if at least one does not exist.","meta":{"line":32,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"hasAny","description":"Checks if any of the elements exist in the collection.","params":[{"name":"keys","description":"The keys of the elements to check for","optional":false,"type":[[["Array","<"],["string",">"]]]}],"returns":[[["boolean"]]],"returnsDescription":"`true` if any of the elements exist, `false` if none exist.","meta":{"line":40,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"initialize","access":"private","params":[{"name":"listener","optional":false,"type":[[["Listener","<"],["any",">"]]]}],"returns":[[["Listener","<"],["any",">"]]],"meta":{"line":36,"file":"ListenerManager.ts","path":"src/lib/managers"}},{"name":"initiate","params":[{"name":"client","optional":false,"type":[[["GClient","<"],["boolean",">"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":45,"file":"ListenerManager.ts","path":"src/lib/managers"}},{"name":"intersect","description":"The intersect method returns a new structure containing items where the keys are present in both original structures.","params":[{"name":"other","description":"The other Collection to filter against","optional":false,"type":[[["Collection","<"],["string",", "],["Listener","<"],["any",">>"]]]}],"returns":[[["Collection","<"],["string",", "],["Listener","<"],["any",">>"]]],"meta":{"line":338,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"keyAt","description":"Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the key at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.","params":[{"name":"index","description":"The index of the key to obtain","optional":true,"type":[[["number"]]]}],"returns":[[["string"]]],"meta":{"line":95,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"keys","description":"Returns an iterable of keys in the map","returns":[[["IterableIterator","<"],["string",">"]]]},{"name":"last","description":"Obtains the last value(s) in this collection.","returns":[[["Listener","<"],["any",">"]]],"returnsDescription":"A single value if no amount is provided or an array of values, starting from the start if\namount is negative","meta":{"line":68,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"lastKey","description":"Obtains the last key(s) in this collection.","returns":[[["string"]]],"returnsDescription":"A single key if no amount is provided or an array of keys, starting from the start if\namount is negative","meta":{"line":78,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"map","description":"Maps each item to another value into an array. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","see":[],"examples":["collection.map(user => user.tag);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function that produces an element of the new array, taking three arguments","optional":false,"type":[[["("],["value",": "],["Listener","<"],["any",">, "],["key",": "],["string",", "],["collection",": "],["ListenerManager",") => "],["T"]]]}],"returns":[[["Array","<"],["T",">"]]],"meta":{"line":211,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"mapValues","description":"Maps each item to another value into a collection. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","see":[],"examples":["collection.mapValues(user => user.tag);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function that produces an element of the new collection, taking three arguments","optional":false,"type":[[["("],["value",": "],["Listener","<"],["any",">, "],["key",": "],["string",", "],["collection",": "],["ListenerManager",") => "],["T"]]]}],"returns":[[["Collection","<"],["string",", "],["T",">"]]],"meta":{"line":223,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"partition","description":"Partitions the collection into two collections where the first collection\ncontains the items that passed and the second contains the items that failed.","see":[],"examples":["const [big, small] = collection.partition(guild => guild.memberCount > 250);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function used to test (should return a boolean)","optional":false,"type":[[["("],["value",": "],["Listener","<"],["any",">, "],["key",": "],["string",", "],["collection",": "],["ListenerManager",") => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["["],["Collection","<"],["K2",", "],["Listener","<"],["any",">>, "],["Collection","<"],["Exclude","<"],["string",", "],["K2",">, "],["Listener","<"],["any",">>]"]]],"meta":{"line":183,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"random","description":"Obtains unique random value(s) from this collection.","returns":[[["Listener","<"],["any",">"]]],"returnsDescription":"A single value if no amount is provided or an array of values","meta":{"line":103,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"randomKey","description":"Obtains unique random key(s) from this collection.","returns":[[["string"]]],"returnsDescription":"A single key if no amount is provided or an array","meta":{"line":112,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"reduce","description":"Applies a function to produce a single value. Identical in behavior to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","see":[],"examples":["collection.reduce((acc, guild) => acc + guild.memberCount, 0);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`","optional":false,"type":[[["("],["accumulator",": "],["T",", "],["value",": "],["Listener","<"],["any",">, "],["key",": "],["string",", "],["collection",": "],["ListenerManager",") => "],["T"]]]},{"name":"initialValue","description":"Starting value for the accumulator","optional":true,"type":[[["T"]]]}],"returns":[[["T"]]],"meta":{"line":264,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"register","params":[{"name":"listener","optional":false,"type":[[["Listener","<"],["any",">"]]]}],"returns":[[["ListenerManager"]]],"meta":{"line":9,"file":"ListenerManager.ts","path":"src/lib/managers"}},{"name":"set","params":[{"name":"key","optional":false,"type":[[["string"]]]},{"name":"value","optional":false,"type":[[["Listener","<"],["any",">"]]]}],"returns":[[["ListenerManager"]]]},{"name":"some","description":"Checks if there exists an item that passes a test. Identical in behavior to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","see":[],"examples":["collection.some(user => user.discriminator === '0000');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function used to test (should return a boolean)","optional":false,"type":[[["("],["value",": "],["Listener","<"],["any",">, "],["key",": "],["string",", "],["collection",": "],["ListenerManager",") => "],["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":235,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"sort","description":"The sort method sorts the items of a collection in place and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.","see":[],"examples":["collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value, according to the string conversion of each element.","optional":true,"type":[[["Comparator","<"],["string",", "],["Listener","<"],["any",">>"]]]}],"returns":[[["ListenerManager"]]],"meta":{"line":332,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"sorted","description":"The sorted method sorts the items of a collection and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.","see":[],"examples":["collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.","optional":true,"type":[[["Comparator","<"],["string",", "],["Listener","<"],["any",">>"]]]}],"returns":[[["Collection","<"],["string",", "],["Listener","<"],["any",">>"]]],"meta":{"line":357,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"sweep","description":"Removes items that satisfy the provided filter function.","params":[{"name":"fn","description":"Function used to test (should return a boolean)","optional":false,"type":[[["("],["value",": "],["Listener","<"],["any",">, "],["key",": "],["string",", "],["collection",": "],["ListenerManager",") => "],["boolean"]]]}],"returns":[[["number"]]],"returnsDescription":"The number of removed entries","meta":{"line":154,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"tap","description":"Runs a function on the collection and returns the collection.","see":[],"examples":["collection\n .tap(coll => console.log(coll.size))\n .filter(user => user.bot)\n .tap(coll => console.log(coll.size))"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function to execute","optional":false,"type":[[["("],["collection",": "],["ListenerManager",") => "],["void"]]]}],"returns":[[["ListenerManager"]]],"meta":{"line":293,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"toJSON","returns":[[["Array","<"],["Listener","<"],["any",">>"]]],"meta":{"line":358,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"unregister","params":[{"name":"name","optional":false,"type":[[["string"]]]}],"returns":[[["Listener","<"],["any",">"]]],"meta":{"line":22,"file":"ListenerManager.ts","path":"src/lib/managers"}},{"name":"values","description":"Returns an iterable of values in the map","returns":[[["IterableIterator","<"],["Listener","<"],["any",">>"]]]}],"meta":{"line":6,"file":"ListenerManager.ts","path":"src/lib/managers"}},{"name":"MessageActionRow","extends":["BaseMessageComponent"],"construct":{"name":"constructor","params":[{"name":"data","optional":true,"type":[[["MessageActionRow"," | "],["MessageActionRowOptions"," | "],["APIActionRowComponent"]]]}],"returns":[[["MessageActionRow"]]],"meta":{"line":1411,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},"props":[{"name":"components","type":[[["Array","<"],["MessageActionRowComponent",">"]]],"meta":{"line":1413,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"type","type":[[["'ACTION","_"],["ROW'"]]],"meta":{"line":1412,"file":"index.d.ts","path":"node_modules/discord.js/typings"}}],"methods":[{"name":"addComponents","params":[{"name":"components","optional":false,"type":[[["Array","<"],["MessageActionRowComponentResolvable","> | "],["Array","<"],["Array","<"],["MessageActionRowComponentResolvable",">>"]]]}],"returns":[[["MessageActionRow"]]],"meta":{"line":1414,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setComponents","params":[{"name":"components","optional":false,"type":[[["Array","<"],["MessageActionRowComponentResolvable","> | "],["Array","<"],["Array","<"],["MessageActionRowComponentResolvable",">>"]]]}],"returns":[[["MessageActionRow"]]],"meta":{"line":1417,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"spliceComponents","params":[{"name":"index","optional":false,"type":[[["number"]]]},{"name":"deleteCount","optional":false,"type":[[["number"]]]},{"name":"components","optional":false,"type":[[["Array","<"],["MessageActionRowComponentResolvable","> | "],["Array","<"],["Array","<"],["MessageActionRowComponentResolvable",">>"]]]}],"returns":[[["MessageActionRow"]]],"meta":{"line":1420,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"toJSON","returns":[[["APIActionRowComponent"]]],"meta":{"line":1425,"file":"index.d.ts","path":"node_modules/discord.js/typings"}}],"meta":{"line":1410,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"MessageButton","extends":["BaseMessageComponent"],"construct":{"name":"constructor","params":[{"name":"data","optional":true,"type":[[["MessageButton"," | "],["MessageButtonOptions"," | "],["APIButtonComponent"]]]}],"returns":[[["MessageButton"]]],"meta":{"line":1449,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},"props":[{"name":"customId","type":[[["string"]]],"meta":{"line":1450,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"disabled","type":[[["boolean"]]],"meta":{"line":1451,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"emoji","type":[[["APIPartialEmoji"]]],"meta":{"line":1452,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"label","type":[[["string"]]],"meta":{"line":1453,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"style","type":[[["'PRIMARY'"," | "],["'SECONDARY'"," | "],["'SUCCESS'"," | "],["'DANGER'"," | "],["'LINK'"]]],"meta":{"line":1454,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"type","type":[[["'BUTTON'"]]],"meta":{"line":1455,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"url","type":[[["string"]]],"meta":{"line":1456,"file":"index.d.ts","path":"node_modules/discord.js/typings"}}],"methods":[{"name":"setCustomId","params":[{"name":"customId","optional":false,"type":[[["string"]]]}],"returns":[[["MessageButton"]]],"meta":{"line":1457,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setDisabled","params":[{"name":"disabled","optional":true,"type":[[["boolean"]]]}],"returns":[[["MessageButton"]]],"meta":{"line":1458,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setEmoji","params":[{"name":"emoji","optional":false,"type":[[["EmojiIdentifierResolvable"]]]}],"returns":[[["MessageButton"]]],"meta":{"line":1459,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setLabel","params":[{"name":"label","optional":false,"type":[[["string"]]]}],"returns":[[["MessageButton"]]],"meta":{"line":1460,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setStyle","params":[{"name":"style","optional":false,"type":[[["MessageButtonStyleResolvable"]]]}],"returns":[[["MessageButton"]]],"meta":{"line":1461,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setURL","params":[{"name":"url","optional":false,"type":[[["string"]]]}],"returns":[[["MessageButton"]]],"meta":{"line":1462,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"toJSON","returns":[[["APIButtonComponent"]]],"meta":{"line":1463,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"resolveStyle","scope":"static","access":"private","params":[{"name":"style","optional":false,"type":[[["MessageButtonStyleResolvable"]]]}],"returns":[[["'PRIMARY'"," | "],["'SECONDARY'"," | "],["'SUCCESS'"," | "],["'DANGER'"," | "],["'LINK'"]]],"meta":{"line":1464,"file":"index.d.ts","path":"node_modules/discord.js/typings"}}],"meta":{"line":1448,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"MessageEmbed","construct":{"name":"constructor","params":[{"name":"data","optional":true,"type":[[["MessageEmbed"," | "],["MessageEmbedOptions"," | "],["APIEmbed"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":1519,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},"props":[{"name":"author","type":[[["MessageEmbedAuthor"]]],"meta":{"line":1520,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"color","type":[[["number"]]],"meta":{"line":1521,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"createdAt","readonly":true,"type":[[["Date"]]],"meta":{"line":1522,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"description","type":[[["string"]]],"meta":{"line":1523,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"fields","type":[[["Array","<"],["EmbedField",">"]]],"meta":{"line":1524,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"footer","type":[[["MessageEmbedFooter"]]],"meta":{"line":1525,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"hexColor","readonly":true,"type":[[["unknown"]]],"meta":{"line":1526,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"image","type":[[["MessageEmbedImage"]]],"meta":{"line":1527,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"length","readonly":true,"type":[[["number"]]],"meta":{"line":1528,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"provider","type":[[["MessageEmbedProvider"]]],"meta":{"line":1529,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"thumbnail","type":[[["MessageEmbedThumbnail"]]],"meta":{"line":1530,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"timestamp","type":[[["number"]]],"meta":{"line":1531,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"title","type":[[["string"]]],"meta":{"line":1532,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"type","see":[],"abstract":false,"deprecated":true,"type":[[["string"]]],"meta":{"line":1534,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"url","type":[[["string"]]],"meta":{"line":1535,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"video","readonly":true,"type":[[["MessageEmbedVideo"]]],"meta":{"line":1536,"file":"index.d.ts","path":"node_modules/discord.js/typings"}}],"methods":[{"name":"_fieldEquals","access":"private","params":[{"name":"field","optional":false,"type":[[["EmbedField"]]]},{"name":"other","optional":false,"type":[[["EmbedField"]]]}],"returns":[[["boolean"]]],"meta":{"line":1517,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"addField","params":[{"name":"name","optional":false,"type":[[["string"]]]},{"name":"value","optional":false,"type":[[["string"]]]},{"name":"inline","optional":true,"type":[[["boolean"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":1537,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"addFields","params":[{"name":"fields","optional":false,"type":[[["Array","<"],["EmbedFieldData","> | "],["Array","<"],["Array","<"],["EmbedFieldData",">>"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":1538,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"equals","params":[{"name":"embed","optional":false,"type":[[["MessageEmbed"," | "],["APIEmbed"]]]}],"returns":[[["boolean"]]],"meta":{"line":1550,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setAuthor","params":[{"name":"name","optional":false,"type":[[["string"]]]},{"name":"iconURL","optional":true,"type":[[["string"]]]},{"name":"url","optional":true,"type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":1540,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setColor","params":[{"name":"color","optional":false,"type":[[["ColorResolvable"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":1541,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setDescription","params":[{"name":"description","optional":false,"type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":1542,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setFields","params":[{"name":"fields","optional":false,"type":[[["Array","<"],["EmbedFieldData","> | "],["Array","<"],["Array","<"],["EmbedFieldData",">>"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":1539,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setFooter","params":[{"name":"text","optional":false,"type":[[["string"]]]},{"name":"iconURL","optional":true,"type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":1543,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setImage","params":[{"name":"url","optional":false,"type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":1544,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setThumbnail","params":[{"name":"url","optional":false,"type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":1545,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setTimestamp","params":[{"name":"timestamp","optional":true,"type":[[["number"," | "],["Date"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":1546,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setTitle","params":[{"name":"title","optional":false,"type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":1547,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setURL","params":[{"name":"url","optional":false,"type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":1548,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"spliceFields","params":[{"name":"index","optional":false,"type":[[["number"]]]},{"name":"deleteCount","optional":false,"type":[[["number"]]]},{"name":"fields","optional":false,"type":[[["Array","<"],["EmbedFieldData","> | "],["Array","<"],["Array","<"],["EmbedFieldData",">>"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":1549,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"toJSON","returns":[[["APIEmbed"]]],"meta":{"line":1551,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"normalizeField","scope":"static","params":[{"name":"name","optional":false,"type":[[["string"]]]},{"name":"value","optional":false,"type":[[["string"]]]},{"name":"inline","optional":true,"type":[[["boolean"]]]}],"returns":[[["Required","<"],["EmbedFieldData",">"]]],"meta":{"line":1553,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"normalizeFields","scope":"static","params":[{"name":"fields","optional":false,"type":[[["Array","<"],["EmbedFieldData","> | "],["Array","<"],["Array","<"],["EmbedFieldData",">>"]]]}],"returns":[[["Array","<"],["Required","<"],["EmbedFieldData",">>"]]],"meta":{"line":1554,"file":"index.d.ts","path":"node_modules/discord.js/typings"}}],"meta":{"line":1516,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"MessageSelectMenu","extends":["BaseMessageComponent"],"construct":{"name":"constructor","params":[{"name":"data","optional":true,"type":[[["MessageSelectMenu"," | "],["MessageSelectMenuOptions"," | "],["APISelectMenuComponent"]]]}],"returns":[[["MessageSelectMenu"]]],"meta":{"line":1635,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},"props":[{"name":"customId","type":[[["string"]]],"meta":{"line":1636,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"disabled","type":[[["boolean"]]],"meta":{"line":1637,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"maxValues","type":[[["number"]]],"meta":{"line":1638,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"minValues","type":[[["number"]]],"meta":{"line":1639,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"options","type":[[["Array","<"],["MessageSelectOption",">"]]],"meta":{"line":1640,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"placeholder","type":[[["string"]]],"meta":{"line":1641,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"type","type":[[["'SELECT","_"],["MENU'"]]],"meta":{"line":1642,"file":"index.d.ts","path":"node_modules/discord.js/typings"}}],"methods":[{"name":"addOptions","params":[{"name":"options","optional":false,"type":[[["Array","<"],["MessageSelectOptionData","> | "],["Array","<"],["Array","<"],["MessageSelectOptionData",">>"]]]}],"returns":[[["MessageSelectMenu"]]],"meta":{"line":1643,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setCustomId","params":[{"name":"customId","optional":false,"type":[[["string"]]]}],"returns":[[["MessageSelectMenu"]]],"meta":{"line":1645,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setDisabled","params":[{"name":"disabled","optional":true,"type":[[["boolean"]]]}],"returns":[[["MessageSelectMenu"]]],"meta":{"line":1646,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setMaxValues","params":[{"name":"maxValues","optional":false,"type":[[["number"]]]}],"returns":[[["MessageSelectMenu"]]],"meta":{"line":1647,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setMinValues","params":[{"name":"minValues","optional":false,"type":[[["number"]]]}],"returns":[[["MessageSelectMenu"]]],"meta":{"line":1648,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setOptions","params":[{"name":"options","optional":false,"type":[[["Array","<"],["MessageSelectOptionData","> | "],["Array","<"],["Array","<"],["MessageSelectOptionData",">>"]]]}],"returns":[[["MessageSelectMenu"]]],"meta":{"line":1644,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"setPlaceholder","params":[{"name":"placeholder","optional":false,"type":[[["string"]]]}],"returns":[[["MessageSelectMenu"]]],"meta":{"line":1649,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"spliceOptions","params":[{"name":"index","optional":false,"type":[[["number"]]]},{"name":"deleteCount","optional":false,"type":[[["number"]]]},{"name":"options","optional":false,"type":[[["Array","<"],["MessageSelectOptionData","> | "],["Array","<"],["Array","<"],["MessageSelectOptionData",">>"]]]}],"returns":[[["MessageSelectMenu"]]],"meta":{"line":1650,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"toJSON","returns":[[["APISelectMenuComponent"]]],"meta":{"line":1655,"file":"index.d.ts","path":"node_modules/discord.js/typings"}}],"meta":{"line":1634,"file":"index.d.ts","path":"node_modules/discord.js/typings"}},{"name":"NsfwInhibitor","construct":{"name":"constructor","returns":[[["NsfwInhibitor"]]]},"methods":[{"name":"run","params":[{"name":"ctx","optional":false,"type":[[["CommandContext"," | "],["ComponentContext"]]]}],"returns":[[["boolean"]]],"meta":{"line":5,"file":"NsfwInhibitor.ts","path":"src/inhibitors"}}],"meta":{"line":4,"file":"NsfwInhibitor.ts","path":"src/inhibitors"}},{"name":"Plugin","construct":{"name":"constructor","params":[{"name":"name","optional":false,"type":[[["string"]]]},{"name":"options","optional":false,"type":[[["PluginOptions"]]]}],"returns":[[["Plugin"]]],"meta":{"line":15,"file":"Plugin.ts","path":"src/lib/structures"}},"props":[{"name":"afterLogin","readonly":true,"type":[[["("],["client",": "],["GClient","<"],["boolean",">) => "],["any"]]],"meta":{"line":13,"file":"Plugin.ts","path":"src/lib/structures"}},{"name":"beforeInitialization","readonly":true,"type":[[["("],["client",": "],["GClient","<"],["boolean",">) => "],["any"]]],"meta":{"line":11,"file":"Plugin.ts","path":"src/lib/structures"}},{"name":"beforeLogin","readonly":true,"type":[[["("],["client",": "],["GClient","<"],["boolean",">) => "],["any"]]],"meta":{"line":12,"file":"Plugin.ts","path":"src/lib/structures"}},{"name":"name","readonly":true,"type":[[["string"]]],"meta":{"line":10,"file":"Plugin.ts","path":"src/lib/structures"}}],"methods":[{"name":"validate","scope":"static","access":"private","params":[{"name":"name","optional":false,"type":[[["string"]]]},{"name":"options","optional":false,"type":[[["PluginOptions"]]]}],"returns":[[["void"]]],"meta":{"line":24,"file":"Plugin.ts","path":"src/lib/structures"}}],"meta":{"line":9,"file":"Plugin.ts","path":"src/lib/structures"}},{"name":"PluginManager","extends":["Collection<string, Plugin>"],"construct":{"name":"constructor","params":[{"name":"entries","optional":true,"type":[[["readonly"," "],["Array","<"],["readonly"," ["],["string",", "],["Plugin","]>"]]]}],"returns":[[["PluginManager"]]]},"props":[{"name":"[toStringTag]","readonly":true,"type":[[["string"]]],"meta":{"line":135,"file":"lib.es2015.symbol.wellknown.d.ts","path":"node_modules/typescript/lib"}},{"name":"client","access":"private","type":[[["GClient","<"],["boolean",">"]]],"meta":{"line":14,"file":"PluginManager.ts","path":"src/lib/managers"}},{"name":"constructor","type":[[["CollectionConstructor"]]],"meta":{"line":17,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"size","readonly":true,"type":[[["number"]]],"meta":{"line":28,"file":"lib.es2015.collection.d.ts","path":"node_modules/typescript/lib"}},{"name":"[species]","scope":"static","readonly":true,"type":[[["MapConstructor"]]],"meta":{"line":317,"file":"lib.es2015.symbol.wellknown.d.ts","path":"node_modules/typescript/lib"}},{"name":"default","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["Collection",")"]]],"meta":{"line":24,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}}],"methods":[{"name":"[iterator]","description":"Returns an iterable of entries in the map.","returns":[[["IterableIterator","<["],["string",", "],["Plugin","]>"]]]},{"name":"at","description":"Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the item at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.","params":[{"name":"index","description":"The index of the element to obtain","optional":true,"type":[[["number"]]]}],"returns":[[["Plugin"]]],"meta":{"line":87,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"clear","returns":[[["void"]]]},{"name":"clone","description":"Creates an identical shallow copy of this collection.","see":[],"examples":["const newColl = someColl.clone();"],"abstract":false,"deprecated":false,"emits":[],"returns":[[["Collection","<"],["string",", "],["Plugin",">"]]],"meta":{"line":301,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"concat","description":"Combines this collection with others into a new collection. None of the source collections are modified.","see":[],"examples":["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"collections","description":"Collections to merge","optional":false,"type":[[["Array","<"],["Collection","<"],["string",", "],["Plugin",">>"]]]}],"returns":[[["Collection","<"],["string",", "],["Plugin",">"]]],"meta":{"line":310,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"delete","params":[{"name":"key","optional":false,"type":[[["string"]]]}],"returns":[[["boolean"]]]},{"name":"difference","description":"The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.","params":[{"name":"other","description":"The other Collection to filter against","optional":false,"type":[[["Collection","<"],["string",", "],["Plugin",">"]]]}],"returns":[[["Collection","<"],["string",", "],["Plugin",">"]]],"meta":{"line":344,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"each","description":"Identical to\n[Map.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach),\nbut returns the collection instead of undefined.","see":[],"examples":["collection\n .each(user => console.log(user.username))\n .filter(user => user.bot)\n .each(user => console.log(user.username));"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function to execute for each element","optional":false,"type":[[["("],["value",": "],["Plugin",", "],["key",": "],["string",", "],["collection",": "],["PluginManager",") => "],["void"]]]}],"returns":[[["PluginManager"]]],"meta":{"line":279,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"entries","description":"Returns an iterable of key, value pairs for every entry in the map.","returns":[[["IterableIterator","<["],["string",", "],["Plugin","]>"]]]},{"name":"equals","description":"Checks if this collection shares identical items with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.","params":[{"name":"collection","description":"Collection to compare with","optional":false,"type":[[["Collection","<"],["string",", "],["Plugin",">"]]]}],"returns":[[["boolean"]]],"returnsDescription":"Whether the collections have identical contents","meta":{"line":320,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"every","description":"Checks if all items passes a test. Identical in behavior to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","see":[],"examples":["collection.every(user => !user.bot);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function used to test (should return a boolean)","optional":false,"type":[[["("],["value",": "],["Plugin",", "],["key",": "],["string",", "],["collection",": "],["PluginManager",") => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["this"," "],["is"," "],["Collection","<"],["K2",", "],["Plugin",">"]]],"meta":{"line":247,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"filter","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.","see":[],"examples":["collection.filter(user => user.username === 'Bob');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"The function to test with (should return boolean)","optional":false,"type":[[["("],["value",": "],["Plugin",", "],["key",": "],["string",", "],["collection",": "],["PluginManager",") => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["Collection","<"],["K2",", "],["Plugin",">"]]],"meta":{"line":167,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"find","description":"Searches for a single item where the given function returns a truthy value. This behaves like\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in Discord.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>","see":[],"examples":["collection.find(user => user.username === 'Bob');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"The function to test with (should return boolean)","optional":false,"type":[[["("],["value",": "],["Plugin",", "],["key",": "],["string",", "],["collection",": "],["PluginManager",") => "],["value"," "],["is"," "],["V2"]]]}],"returns":[[["V2"]]],"meta":{"line":127,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"findKey","description":"Searches for the key of a single item where the given function returns a truthy value. This behaves like\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex),\nbut returns the key rather than the positional index.","see":[],"examples":["collection.findKey(user => user.username === 'Bob');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"The function to test with (should return boolean)","optional":false,"type":[[["("],["value",": "],["Plugin",", "],["key",": "],["string",", "],["collection",": "],["PluginManager",") => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["K2"]]],"meta":{"line":142,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"first","description":"Obtains the first value(s) in this collection.","returns":[[["Plugin"]]],"returnsDescription":"A single value if no amount is provided or an array of values, starting from the end if amount is negative","meta":{"line":48,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"firstKey","description":"Obtains the first key(s) in this collection.","returns":[[["string"]]],"returnsDescription":"A single key if no amount is provided or an array of keys, starting from the end if\namount is negative","meta":{"line":58,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"flatMap","description":"Maps each item into a Collection, then joins the results into a single Collection. Identical in behavior to\n[Array.flatMap()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap).","see":[],"examples":["collection.flatMap(guild => guild.members.cache);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function that produces a new Collection","optional":false,"type":[[["("],["value",": "],["Plugin",", "],["key",": "],["string",", "],["collection",": "],["PluginManager",") => "],["Collection","<"],["string",", "],["T",">"]]]}],"returns":[[["Collection","<"],["string",", "],["T",">"]]],"meta":{"line":199,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"forEach","params":[{"name":"callbackfn","optional":false,"type":[[["("],["value",": "],["Plugin",", "],["key",": "],["string",", "],["map",": "],["Map","<"],["string",", "],["Plugin",">) => "],["void"]]]},{"name":"thisArg","optional":true,"type":[[["any"]]]}],"returns":[[["void"]]]},{"name":"get","params":[{"name":"key","optional":false,"type":[[["string"]]]}],"returns":[[["Plugin"]]]},{"name":"has","params":[{"name":"key","optional":false,"type":[[["string"]]]}],"returns":[[["boolean"]]]},{"name":"hasAll","description":"Checks if all of the elements exist in the collection.","params":[{"name":"keys","description":"The keys of the elements to check for","optional":false,"type":[[["Array","<"],["string",">"]]]}],"returns":[[["boolean"]]],"returnsDescription":"`true` if all of the elements exist, `false` if at least one does not exist.","meta":{"line":32,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"hasAny","description":"Checks if any of the elements exist in the collection.","params":[{"name":"keys","description":"The keys of the elements to check for","optional":false,"type":[[["Array","<"],["string",">"]]]}],"returns":[[["boolean"]]],"returnsDescription":"`true` if any of the elements exist, `false` if none exist.","meta":{"line":40,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"initiate","params":[{"name":"client","optional":false,"type":[[["GClient","<"],["boolean",">"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":38,"file":"PluginManager.ts","path":"src/lib/managers"}},{"name":"intersect","description":"The intersect method returns a new structure containing items where the keys are present in both original structures.","params":[{"name":"other","description":"The other Collection to filter against","optional":false,"type":[[["Collection","<"],["string",", "],["Plugin",">"]]]}],"returns":[[["Collection","<"],["string",", "],["Plugin",">"]]],"meta":{"line":338,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"keyAt","description":"Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the key at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.","params":[{"name":"index","description":"The index of the key to obtain","optional":true,"type":[[["number"]]]}],"returns":[[["string"]]],"meta":{"line":95,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"keys","description":"Returns an iterable of keys in the map","returns":[[["IterableIterator","<"],["string",">"]]]},{"name":"last","description":"Obtains the last value(s) in this collection.","returns":[[["Plugin"]]],"returnsDescription":"A single value if no amount is provided or an array of values, starting from the start if\namount is negative","meta":{"line":68,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"lastKey","description":"Obtains the last key(s) in this collection.","returns":[[["string"]]],"returnsDescription":"A single key if no amount is provided or an array of keys, starting from the start if\namount is negative","meta":{"line":78,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"load","params":[{"name":"type","optional":false,"type":[[["PluginType"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":31,"file":"PluginManager.ts","path":"src/lib/managers"}},{"name":"map","description":"Maps each item to another value into an array. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","see":[],"examples":["collection.map(user => user.tag);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function that produces an element of the new array, taking three arguments","optional":false,"type":[[["("],["value",": "],["Plugin",", "],["key",": "],["string",", "],["collection",": "],["PluginManager",") => "],["T"]]]}],"returns":[[["Array","<"],["T",">"]]],"meta":{"line":211,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"mapValues","description":"Maps each item to another value into a collection. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","see":[],"examples":["collection.mapValues(user => user.tag);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function that produces an element of the new collection, taking three arguments","optional":false,"type":[[["("],["value",": "],["Plugin",", "],["key",": "],["string",", "],["collection",": "],["PluginManager",") => "],["T"]]]}],"returns":[[["Collection","<"],["string",", "],["T",">"]]],"meta":{"line":223,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"partition","description":"Partitions the collection into two collections where the first collection\ncontains the items that passed and the second contains the items that failed.","see":[],"examples":["const [big, small] = collection.partition(guild => guild.memberCount > 250);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function used to test (should return a boolean)","optional":false,"type":[[["("],["value",": "],["Plugin",", "],["key",": "],["string",", "],["collection",": "],["PluginManager",") => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["["],["Collection","<"],["K2",", "],["Plugin",">, "],["Collection","<"],["Exclude","<"],["string",", "],["K2",">, "],["Plugin",">]"]]],"meta":{"line":183,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"random","description":"Obtains unique random value(s) from this collection.","returns":[[["Plugin"]]],"returnsDescription":"A single value if no amount is provided or an array of values","meta":{"line":103,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"randomKey","description":"Obtains unique random key(s) from this collection.","returns":[[["string"]]],"returnsDescription":"A single key if no amount is provided or an array","meta":{"line":112,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"reduce","description":"Applies a function to produce a single value. Identical in behavior to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","see":[],"examples":["collection.reduce((acc, guild) => acc + guild.memberCount, 0);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`","optional":false,"type":[[["("],["accumulator",": "],["T",", "],["value",": "],["Plugin",", "],["key",": "],["string",", "],["collection",": "],["PluginManager",") => "],["T"]]]},{"name":"initialValue","description":"Starting value for the accumulator","optional":true,"type":[[["T"]]]}],"returns":[[["T"]]],"meta":{"line":264,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"register","params":[{"name":"plugin","optional":false,"type":[[["any"]]]}],"returns":[[["PluginManager"]]],"meta":{"line":16,"file":"PluginManager.ts","path":"src/lib/managers"}},{"name":"search","params":[{"name":"basedir","optional":false,"type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":27,"file":"PluginManager.ts","path":"src/lib/managers"}},{"name":"set","params":[{"name":"key","optional":false,"type":[[["string"]]]},{"name":"value","optional":false,"type":[[["Plugin"]]]}],"returns":[[["PluginManager"]]]},{"name":"some","description":"Checks if there exists an item that passes a test. Identical in behavior to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","see":[],"examples":["collection.some(user => user.discriminator === '0000');"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function used to test (should return a boolean)","optional":false,"type":[[["("],["value",": "],["Plugin",", "],["key",": "],["string",", "],["collection",": "],["PluginManager",") => "],["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":235,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"sort","description":"The sort method sorts the items of a collection in place and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.","see":[],"examples":["collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value, according to the string conversion of each element.","optional":true,"type":[[["Comparator","<"],["string",", "],["Plugin",">"]]]}],"returns":[[["PluginManager"]]],"meta":{"line":332,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"sorted","description":"The sorted method sorts the items of a collection and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.","see":[],"examples":["collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.","optional":true,"type":[[["Comparator","<"],["string",", "],["Plugin",">"]]]}],"returns":[[["Collection","<"],["string",", "],["Plugin",">"]]],"meta":{"line":357,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"sweep","description":"Removes items that satisfy the provided filter function.","params":[{"name":"fn","description":"Function used to test (should return a boolean)","optional":false,"type":[[["("],["value",": "],["Plugin",", "],["key",": "],["string",", "],["collection",": "],["PluginManager",") => "],["boolean"]]]}],"returns":[[["number"]]],"returnsDescription":"The number of removed entries","meta":{"line":154,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"tap","description":"Runs a function on the collection and returns the collection.","see":[],"examples":["collection\n .tap(coll => console.log(coll.size))\n .filter(user => user.bot)\n .tap(coll => console.log(coll.size))"],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"fn","description":"Function to execute","optional":false,"type":[[["("],["collection",": "],["PluginManager",") => "],["void"]]]}],"returns":[[["PluginManager"]]],"meta":{"line":293,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"toJSON","returns":[[["Array","<"],["Plugin",">"]]],"meta":{"line":358,"file":"index.d.ts","path":"node_modules/discord.js/node_modules/@discordjs/collection/dist"}},{"name":"values","description":"Returns an iterable of values in the map","returns":[[["IterableIterator","<"],["Plugin",">"]]]}],"meta":{"line":13,"file":"PluginManager.ts","path":"src/lib/managers"}},{"name":"UserOnlyInhibitor","construct":{"name":"constructor","params":[{"name":"userId","optional":false,"type":[[["string"]]]}],"returns":[[["UserOnlyInhibitor"]]],"meta":{"line":7,"file":"UserOnlyInhibitor.ts","path":"src/inhibitors"}},"props":[{"name":"userId","readonly":true,"type":[[["string"]]],"meta":{"line":5,"file":"UserOnlyInhibitor.ts","path":"src/inhibitors"}}],"methods":[{"name":"run","params":[{"name":"ctx","optional":false,"type":[[["CommandContext"," | "],["ComponentContext"]]]}],"returns":[[["boolean"]]],"meta":{"line":11,"file":"UserOnlyInhibitor.ts","path":"src/inhibitors"}}],"meta":{"line":4,"file":"UserOnlyInhibitor.ts","path":"src/inhibitors"}},{"name":"UserPermissionsInhibitor","construct":{"name":"constructor","params":[{"name":"permissions","optional":false,"type":[[["Array","<"],["PermissionResolvable",">"]]]}],"returns":[[["UserPermissionsInhibitor"]]],"meta":{"line":8,"file":"UserPermissionsInhibitor.ts","path":"src/inhibitors"}},"props":[{"name":"permissions","readonly":true,"type":[[["Array","<"],["PermissionResolvable",">"]]],"meta":{"line":6,"file":"UserPermissionsInhibitor.ts","path":"src/inhibitors"}}],"methods":[{"name":"run","params":[{"name":"ctx","optional":false,"type":[[["CommandContext"," | "],["ComponentContext"]]]}],"returns":[[["boolean"]]],"meta":{"line":12,"file":"UserPermissionsInhibitor.ts","path":"src/inhibitors"}}],"meta":{"line":5,"file":"UserPermissionsInhibitor.ts","path":"src/inhibitors"}}],"typedefs":[{"name":"ArgumentType","meta":{"line":4,"file":"Argument.ts","path":"src/lib/arguments"},"props":[{"name":"BOOLEAN","type":[[["5"]]]},{"name":"CHANNEL","type":[[["7"]]]},{"name":"INTEGER","type":[[["4"]]]},{"name":"MENTIONABLE","type":[[["9"]]]},{"name":"NUMBER","type":[[["10"]]]},{"name":"ROLE","type":[[["8"]]]},{"name":"STRING","type":[[["3"]]]},{"name":"SUB_COMMAND","type":[[["1"]]]},{"name":"SUB_COMMAND_GROUP","type":[[["2"]]]},{"name":"USER","type":[[["6"]]]}]},{"name":"CommandType","meta":{"line":6,"file":"Command.ts","path":"src/lib/structures"},"props":[{"name":"CONTEXT_MESSAGE","type":[[["3"]]]},{"name":"CONTEXT_USER","type":[[["2"]]]},{"name":"MESSAGE","type":[[["0"]]]},{"name":"SLASH","type":[[["1"]]]}]},{"name":"ComponentType","meta":{"line":4,"file":"Component.ts","path":"src/lib/structures"},"props":[{"name":"BUTTON","type":[[["\"BUTTON\""]]]},{"name":"SELECT_MENU","type":[[["\"SELECT_MENU\""]]]}]},{"name":"PluginType","meta":{"line":7,"file":"PluginManager.ts","path":"src/lib/managers"},"props":[{"name":"AFTER_LOGIN","type":[[["\"afterLogin\""]]]},{"name":"BEFORE_INITIALIZATION","type":[[["\"beforeInitialization\""]]]},{"name":"BEFORE_LOGIN","type":[[["\"beforeLogin\""]]]}]},{"name":"ArgumentOptions","meta":{"line":17,"file":"Argument.ts","path":"src/lib/arguments"},"props":[{"name":"choices","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"description","optional":false,"type":[[["string"]]]},{"name":"options","optional":true,"type":[[["Array","<"],["CommandArgument"," | "],["Argument",">"]]]},{"name":"required","optional":true,"type":[[["boolean"]]]},{"name":"type","optional":false,"type":[[["ArgumentType"]]]},{"name":"run","optional":true,"type":[[["("],["ctx",": "],["AutocompleteContext",") => "],["any"]]]}]},{"name":"CommandArgument","meta":{"line":18,"file":"Command.ts","path":"src/lib/structures"},"props":[{"name":"choices","optional":true,"type":[[["Array","<"],["CommandArgumentChoice",">"]]]},{"name":"description","optional":false,"type":[[["string"]]]},{"name":"name","optional":false,"type":[[["string"]]]},{"name":"options","optional":true,"type":[[["Array","<"],["CommandArgument"," | "],["Argument",">"]]]},{"name":"required","optional":true,"type":[[["boolean"]]]},{"name":"type","optional":false,"type":[[["ArgumentType"]]]},{"name":"run","optional":true,"type":[[["("],["ctx",": "],["AutocompleteContext",") => "],["any"]]]}]},{"name":"CommandArgumentChoice","meta":{"line":13,"file":"Command.ts","path":"src/lib/structures"},"props":[{"name":"name","optional":false,"type":[[["string"]]]},{"name":"value","optional":false,"type":[[["any"]]]}]},{"name":"CommandContextOptions","meta":{"line":16,"file":"CommandContext.ts","path":"src/lib/structures"},"props":[{"name":"arguments","optional":false,"type":[[["ArgumentResolver"]]]},{"name":"channel","optional":false,"type":[[["TextBasedChannels"]]]},{"name":"channelId","optional":false,"type":[[["string"]]]},{"name":"command","optional":false,"type":[[["Command"]]]},{"name":"commandName","optional":false,"type":[[["string"]]]},{"name":"createdAt","optional":false,"type":[[["Date"]]]},{"name":"createdTimestamp","optional":false,"type":[[["number"]]]},{"name":"guild","optional":true,"type":[[["Guild"]]]},{"name":"guildId","optional":true,"type":[[["string"]]]},{"name":"interaction","optional":true,"type":[[["CommandInteraction","<"],["CacheType","> | "],["ContextMenuInteraction","<"],["CacheType",">"]]]},{"name":"member","optional":true,"type":[[["GuildMember"]]]},{"name":"memberPermissions","optional":true,"type":[[["Permissions"]]]},{"name":"message","optional":true,"type":[[["Message","<"],["boolean",">"]]]},{"name":"user","optional":false,"type":[[["User"]]]},{"name":"userId","optional":false,"type":[[["string"]]]},{"name":"username","optional":false,"type":[[["string"]]]},{"name":"deferReply","optional":false,"type":[[["("],["options",": "],["InteractionDeferReplyOptions",") => "],["Promise","<"],["void"," | "],["Message","<"],["boolean","> | "],["APIMessage",">"]]]},{"name":"deleteReply","optional":false,"type":[[["(..."],["args",": "],["unknown","[]) => "],["Promise","<"],["void",">"]]]},{"name":"editReply","optional":false,"type":[[["("],["options",": "],["string"," | "],["MessagePayload"," | "],["WebhookEditMessageOptions",") => "],["Promise","<"],["Message","<"],["boolean","> | "],["APIMessage",">"]]]},{"name":"followUp","optional":false,"type":[[["("],["options",": "],["string"," | "],["MessagePayload"," | "],["InteractionReplyOptions",") => "],["Promise","<"],["void"," | "],["Message","<"],["boolean","> | "],["APIMessage",">"]]]},{"name":"reply","optional":false,"type":[[["("],["options",": "],["string"," | "],["MessagePayload"," | "],["InteractionReplyOptions",") => "],["Promise","<"],["void"," | "],["Message","<"],["boolean","> | "],["APIMessage",">"]]]}]},{"name":"CommandOptions","meta":{"line":32,"file":"Command.ts","path":"src/lib/structures"},"props":[{"name":"arguments","optional":true,"type":[[["Array","<"],["CommandArgument"," | "],["Argument",">"]]]},{"name":"cooldown","optional":true,"type":[[["string"]]]},{"name":"description","optional":true,"type":[[["string"]]]},{"name":"guildId","optional":true,"type":[[["string"]]]},{"name":"inhibitors","optional":true,"type":[[["CommandInhibitors"]]]},{"name":"type","optional":false,"type":[[["Array","<"],["CommandType",">"]]]},{"name":"onError","optional":true,"type":[[["("],["ctx",": "],["CommandContext",", "],["error",": "],["any",") => "],["any"]]]},{"name":"run","optional":true,"type":[[["("],["ctx",": "],["CommandContext",") => "],["any"]]]}]},{"name":"ComponentOptions","meta":{"line":12,"file":"Component.ts","path":"src/lib/structures"},"props":[{"name":"cooldown","optional":true,"type":[[["string"]]]},{"name":"guildId","optional":true,"type":[[["string"]]]},{"name":"inhibitors","optional":true,"type":[[["ComponentInhibitors"]]]},{"name":"type","optional":false,"type":[[["Array","<"],["ComponentType",">"]]]},{"name":"onError","optional":true,"type":[[["("],["interaction",": "],["ComponentContext",", "],["error",": "],["any",") => "],["any"]]]},{"name":"run","optional":true,"type":[[["("],["interaction",": "],["ComponentContext",") => "],["any"]]]}]},{"name":"GClientOptions","meta":{"line":15,"file":"GClient.ts","path":"src/lib"},"props":[{"name":"allowedMentions","optional":true,"type":[[["MessageMentionOptions"]]]},{"name":"cooldown","optional":true,"type":[[["string"]]]},{"name":"devGuildId","optional":true,"type":[[["string"]]]},{"name":"dir","optional":true,"type":[[["string"]]]},{"name":"dirs","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"failIfNotExists","optional":true,"type":[[["boolean"]]]},{"name":"http","optional":true,"type":[[["HTTPOptions"]]]},{"name":"intents","optional":false,"type":[[["BitFieldResolvable","<"],["IntentsString",", "],["number",">"]]]},{"name":"invalidRequestWarningInterval","optional":true,"type":[[["number"]]]},{"name":"makeCache","optional":true,"type":[[["CacheFactory"]]]},{"name":"messageCacheLifetime","optional":true,"type":[[["number"]]]},{"name":"messagePrefix","optional":true,"type":[[["string"]]]},{"name":"messageSweepInterval","optional":true,"type":[[["number"]]]},{"name":"partials","optional":true,"type":[[["Array","<"],["PartialTypes",">"]]]},{"name":"presence","optional":true,"type":[[["PresenceData"]]]},{"name":"rejectOnRateLimit","optional":true,"type":[[["Array","<"],["string","> | ("],["data",": "],["RateLimitData",") => "],["boolean"," | "],["Promise","<"],["boolean",">"]]]},{"name":"restGlobalRateLimit","optional":true,"type":[[["number"]]]},{"name":"restRequestTimeout","optional":true,"type":[[["number"]]]},{"name":"restSweepInterval","optional":true,"type":[[["number"]]]},{"name":"restTimeOffset","optional":true,"type":[[["number"]]]},{"name":"restWsBridgeTimeout","optional":true,"type":[[["number"]]]},{"name":"retryLimit","optional":true,"type":[[["number"]]]},{"name":"shardCount","optional":true,"type":[[["number"]]]},{"name":"shards","optional":true,"type":[[["number"," | "],["Array","<"],["number","> | "],["'auto'"]]]},{"name":"userAgentSuffix","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"ws","optional":true,"type":[[["WebSocketOptions"]]]}]},{"name":"ListenerOptions","meta":{"line":5,"file":"Listener.ts","path":"src/lib/structures"},"props":[{"name":"name","optional":false,"type":[[["string"]]]},{"name":"run","optional":true,"type":[[["("],["args",": "],["Event"," "],["extends"," "],["keyof"," "],["ClientEvents"," ? "],["ClientEvents","["],["Event","] : "],["Array","<"],["unknown",">) => "],["any"]]]}]},{"name":"PluginOptions","meta":{"line":3,"file":"Plugin.ts","path":"src/lib/structures"},"props":[{"name":"afterLogin","optional":true,"type":[[["("],["client",": "],["GClient","<"],["boolean",">) => "],["any"]]]},{"name":"beforeInitialization","optional":true,"type":[[["("],["client",": "],["GClient","<"],["boolean",">) => "],["any"]]]},{"name":"beforeLogin","optional":true,"type":[[["("],["client",": "],["GClient","<"],["boolean",">) => "],["any"]]]}]},{"name":"CommandInhibitor","type":[[["("],["ctx",": "],["CommandContext",") => "],["boolean"," | "],["void"," | "],["Promise","<"],["boolean","> | "],["Promise","<"],["void",">"]]],"meta":{"line":28,"file":"Command.ts","path":"src/lib/structures"},"params":[{"name":"ctx","optional":false,"type":[[["CommandContext"]]]}],"returns":[[["boolean"," | "],["void"," | "],["Promise","<"],["boolean","> | "],["Promise","<"],["void",">"]]]},{"name":"CommandInhibitors","type":[[["Array","<{"],["\nrun",": "],["CommandInhibitor\n","} | "],["CommandInhibitor",">"]]],"meta":{"line":29,"file":"Command.ts","path":"src/lib/structures"}},{"name":"ComponentInhibitor","type":[[["("],["ctx",": "],["ComponentContext",") => "],["boolean"," | "],["void"," | "],["Promise","<"],["boolean","> | "],["Promise","<"],["void",">"]]],"meta":{"line":9,"file":"Component.ts","path":"src/lib/structures"},"params":[{"name":"ctx","optional":false,"type":[[["ComponentContext"]]]}],"returns":[[["boolean"," | "],["void"," | "],["Promise","<"],["boolean","> | "],["Promise","<"],["void",">"]]]},{"name":"ComponentInhibitors","type":[[["Array","<{"],["\nrun",": "],["ComponentInhibitor\n","} | "],["ComponentInhibitor",">"]]],"meta":{"line":10,"file":"Component.ts","path":"src/lib/structures"}}]}